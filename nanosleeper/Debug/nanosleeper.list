
nanosleeper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028ec  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002a78  08002a78  00012a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ab8  08002ab8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ab8  08002ab8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ab8  08002ab8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ab8  08002ab8  00012ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002abc  08002abc  00012abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002acc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002acc  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000abed  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001954  00000000  00000000  0002ac29  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009c8  00000000  00000000  0002c580  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008e0  00000000  00000000  0002cf48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001893a  00000000  00000000  0002d828  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000085b1  00000000  00000000  00046162  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00098457  00000000  00000000  0004e713  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e6b6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002658  00000000  00000000  000e6be8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002a60 	.word	0x08002a60

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002a60 	.word	0x08002a60

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001ce:	b097      	sub	sp, #92	; 0x5c
 80001d0:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 faae 	bl	8000732 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f84b 	bl	8000270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f8e3 	bl	80003a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001de:	f000 f8a3 	bl	8000328 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Toggle LED to indicate awake
  HAL_GPIO_WritePin(D12_GPIO_Port, D12_Pin, GPIO_PIN_SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001e8:	481d      	ldr	r0, [pc, #116]	; (8000260 <main+0x94>)
 80001ea:	f000 fd8d 	bl	8000d08 <HAL_GPIO_WritePin>
  HAL_Delay(5000);
 80001ee:	f241 3088 	movw	r0, #5000	; 0x1388
 80001f2:	f000 fb0f 	bl	8000814 <HAL_Delay>
  HAL_GPIO_WritePin(D12_GPIO_Port, D12_Pin, GPIO_PIN_RESET);
 80001f6:	2200      	movs	r2, #0
 80001f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001fc:	4818      	ldr	r0, [pc, #96]	; (8000260 <main+0x94>)
 80001fe:	f000 fd83 	bl	8000d08 <HAL_GPIO_WritePin>

  // TODO set up RTC, checking if it's already been set up
  bool is_initial_setup = true; // TODO how to know?
 8000202:	2301      	movs	r3, #1
 8000204:	73fb      	strb	r3, [r7, #15]
  uint32_t current_time_utc = 1705968815;
 8000206:	4b17      	ldr	r3, [pc, #92]	; (8000264 <main+0x98>)
 8000208:	60bb      	str	r3, [r7, #8]
  bool rv_3028_setup_ok = init_rv_3028_c7(hi2c1, current_time_utc, is_initial_setup);
 800020a:	4e17      	ldr	r6, [pc, #92]	; (8000268 <main+0x9c>)
 800020c:	7bfb      	ldrb	r3, [r7, #15]
 800020e:	9310      	str	r3, [sp, #64]	; 0x40
 8000210:	68bb      	ldr	r3, [r7, #8]
 8000212:	930f      	str	r3, [sp, #60]	; 0x3c
 8000214:	466d      	mov	r5, sp
 8000216:	f106 0410 	add.w	r4, r6, #16
 800021a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800021c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800021e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000226:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800022a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800022e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000232:	f000 f8fe 	bl	8000432 <init_rv_3028_c7>
 8000236:	4603      	mov	r3, r0
 8000238:	71fb      	strb	r3, [r7, #7]


  // TODO do to shutdown mode, with pin wakeup. Shouldn't get past this
  /* Disable used wakeup source: PWR_WAKEUP_PIN2 */
  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 800023a:	2001      	movs	r0, #1
 800023c:	f001 fb0e 	bl	800185c <HAL_PWR_DisableWakeUpPin>
//  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN3);
//  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN4);
//  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN5);

  /* Clear all related wakeup flags */
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF1);
 8000240:	4b0a      	ldr	r3, [pc, #40]	; (800026c <main+0xa0>)
 8000242:	2201      	movs	r2, #1
 8000244:	619a      	str	r2, [r3, #24]

  /* Enable wakeup pin WKUP2 */
  HAL_PWREx_EnableGPIOPullUp(RTC_WKUP_GPIO_Port, RTC_WKUP_Pin);
 8000246:	2101      	movs	r1, #1
 8000248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800024c:	f001 fb90 	bl	8001970 <HAL_PWREx_EnableGPIOPullUp>
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1_LOW);
 8000250:	2021      	movs	r0, #33	; 0x21
 8000252:	f001 fae3 	bl	800181c <HAL_PWR_EnableWakeUpPin>
  HAL_PWREx_DisableInternalWakeUpLine();
 8000256:	f001 fb7b 	bl	8001950 <HAL_PWREx_DisableInternalWakeUpLine>

  /* enter shutdown */
  HAL_PWREx_EnterSHUTDOWNMode();
 800025a:	f001 fc03 	bl	8001a64 <HAL_PWREx_EnterSHUTDOWNMode>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800025e:	e7fe      	b.n	800025e <main+0x92>
 8000260:	48000800 	.word	0x48000800
 8000264:	65af04af 	.word	0x65af04af
 8000268:	20000028 	.word	0x20000028
 800026c:	40007000 	.word	0x40007000

08000270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b0a4      	sub	sp, #144	; 0x90
 8000274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000276:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800027a:	2244      	movs	r2, #68	; 0x44
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f002 fbe6 	bl	8002a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000284:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]
 8000290:	60da      	str	r2, [r3, #12]
 8000292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2234      	movs	r2, #52	; 0x34
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f002 fbd8 	bl	8002a50 <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002a4:	f001 fafe 	bl	80018a4 <HAL_PWREx_ControlVoltageScaling>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x42>
  {
    Error_Handler();
 80002ae:	f000 f8b9 	bl	8000424 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002b2:	2310      	movs	r3, #16
 80002b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002b6:	2301      	movs	r3, #1
 80002b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002be:	2360      	movs	r3, #96	; 0x60
 80002c0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002c2:	2300      	movs	r3, #0
 80002c4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80002ca:	4618      	mov	r0, r3
 80002cc:	f001 fbe4 	bl	8001a98 <HAL_RCC_OscConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002d6:	f000 f8a5 	bl	8000424 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002da:	230f      	movs	r3, #15
 80002dc:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002de:	2300      	movs	r3, #0
 80002e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ea:	2300      	movs	r3, #0
 80002ec:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80002f2:	2100      	movs	r1, #0
 80002f4:	4618      	mov	r0, r3
 80002f6:	f002 f835 	bl	8002364 <HAL_RCC_ClockConfig>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000300:	f000 f890 	bl	8000424 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000304:	2340      	movs	r3, #64	; 0x40
 8000306:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000308:	2300      	movs	r3, #0
 800030a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	4618      	mov	r0, r3
 8000310:	f002 f9f4 	bl	80026fc <HAL_RCCEx_PeriphCLKConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800031a:	f000 f883 	bl	8000424 <Error_Handler>
  }
}
 800031e:	bf00      	nop
 8000320:	3790      	adds	r7, #144	; 0x90
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800032c:	4b1b      	ldr	r3, [pc, #108]	; (800039c <MX_I2C1_Init+0x74>)
 800032e:	4a1c      	ldr	r2, [pc, #112]	; (80003a0 <MX_I2C1_Init+0x78>)
 8000330:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000332:	4b1a      	ldr	r3, [pc, #104]	; (800039c <MX_I2C1_Init+0x74>)
 8000334:	f640 6214 	movw	r2, #3604	; 0xe14
 8000338:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800033a:	4b18      	ldr	r3, [pc, #96]	; (800039c <MX_I2C1_Init+0x74>)
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000340:	4b16      	ldr	r3, [pc, #88]	; (800039c <MX_I2C1_Init+0x74>)
 8000342:	2201      	movs	r2, #1
 8000344:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000346:	4b15      	ldr	r3, [pc, #84]	; (800039c <MX_I2C1_Init+0x74>)
 8000348:	2200      	movs	r2, #0
 800034a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <MX_I2C1_Init+0x74>)
 800034e:	2200      	movs	r2, #0
 8000350:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000352:	4b12      	ldr	r3, [pc, #72]	; (800039c <MX_I2C1_Init+0x74>)
 8000354:	2200      	movs	r2, #0
 8000356:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000358:	4b10      	ldr	r3, [pc, #64]	; (800039c <MX_I2C1_Init+0x74>)
 800035a:	2200      	movs	r2, #0
 800035c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800035e:	4b0f      	ldr	r3, [pc, #60]	; (800039c <MX_I2C1_Init+0x74>)
 8000360:	2200      	movs	r2, #0
 8000362:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000364:	480d      	ldr	r0, [pc, #52]	; (800039c <MX_I2C1_Init+0x74>)
 8000366:	f000 fce7 	bl	8000d38 <HAL_I2C_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000370:	f000 f858 	bl	8000424 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000374:	2100      	movs	r1, #0
 8000376:	4809      	ldr	r0, [pc, #36]	; (800039c <MX_I2C1_Init+0x74>)
 8000378:	f001 f9b8 	bl	80016ec <HAL_I2CEx_ConfigAnalogFilter>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000382:	f000 f84f 	bl	8000424 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000386:	2100      	movs	r1, #0
 8000388:	4804      	ldr	r0, [pc, #16]	; (800039c <MX_I2C1_Init+0x74>)
 800038a:	f001 f9fa 	bl	8001782 <HAL_I2CEx_ConfigDigitalFilter>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000394:	f000 f846 	bl	8000424 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}
 800039c:	20000028 	.word	0x20000028
 80003a0:	40005400 	.word	0x40005400

080003a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b088      	sub	sp, #32
 80003a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003aa:	f107 030c 	add.w	r3, r7, #12
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
 80003b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ba:	4b18      	ldr	r3, [pc, #96]	; (800041c <MX_GPIO_Init+0x78>)
 80003bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003be:	4a17      	ldr	r2, [pc, #92]	; (800041c <MX_GPIO_Init+0x78>)
 80003c0:	f043 0304 	orr.w	r3, r3, #4
 80003c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003c6:	4b15      	ldr	r3, [pc, #84]	; (800041c <MX_GPIO_Init+0x78>)
 80003c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ca:	f003 0304 	and.w	r3, r3, #4
 80003ce:	60bb      	str	r3, [r7, #8]
 80003d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d2:	4b12      	ldr	r3, [pc, #72]	; (800041c <MX_GPIO_Init+0x78>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	4a11      	ldr	r2, [pc, #68]	; (800041c <MX_GPIO_Init+0x78>)
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003de:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MX_GPIO_Init+0x78>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e2:	f003 0301 	and.w	r3, r3, #1
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D12_Pin|D13_Pin, GPIO_PIN_RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80003f0:	480b      	ldr	r0, [pc, #44]	; (8000420 <MX_GPIO_Init+0x7c>)
 80003f2:	f000 fc89 	bl	8000d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D12_Pin D13_Pin */
  GPIO_InitStruct.Pin = D12_Pin|D13_Pin;
 80003f6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80003fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fc:	2301      	movs	r3, #1
 80003fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000400:	2300      	movs	r3, #0
 8000402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000404:	2300      	movs	r3, #0
 8000406:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000408:	f107 030c 	add.w	r3, r7, #12
 800040c:	4619      	mov	r1, r3
 800040e:	4804      	ldr	r0, [pc, #16]	; (8000420 <MX_GPIO_Init+0x7c>)
 8000410:	f000 fb08 	bl	8000a24 <HAL_GPIO_Init>

}
 8000414:	bf00      	nop
 8000416:	3720      	adds	r7, #32
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40021000 	.word	0x40021000
 8000420:	48000800 	.word	0x48000800

08000424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr

08000432 <init_rv_3028_c7>:
#include "main.h"

#include "rv_3028_c7.h"

bool init_rv_3028_c7(I2C_HandleTypeDef i2c_handle, uint32_t current_time, bool first_setup)
{
 8000432:	b084      	sub	sp, #16
 8000434:	b580      	push	{r7, lr}
 8000436:	b08a      	sub	sp, #40	; 0x28
 8000438:	af04      	add	r7, sp, #16
 800043a:	f107 0c20 	add.w	ip, r7, #32
 800043e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t timeout = 300; // in ms
 8000442:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000446:	617b      	str	r3, [r7, #20]

	uint8_t id_value = 0;
 8000448:	2300      	movs	r3, #0
 800044a:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef id_status = HAL_I2C_Mem_Read(&i2c_handle, RV3028_ADDRESS, RV3028_ID, I2C_MEMADD_SIZE_8BIT, &id_value, 1, timeout);
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	9302      	str	r3, [sp, #8]
 8000450:	2301      	movs	r3, #1
 8000452:	9301      	str	r3, [sp, #4]
 8000454:	f107 030b 	add.w	r3, r7, #11
 8000458:	9300      	str	r3, [sp, #0]
 800045a:	2301      	movs	r3, #1
 800045c:	2228      	movs	r2, #40	; 0x28
 800045e:	21a4      	movs	r1, #164	; 0xa4
 8000460:	f107 0020 	add.w	r0, r7, #32
 8000464:	f000 fe0c 	bl	8001080 <HAL_I2C_Mem_Read>
 8000468:	4603      	mov	r3, r0
 800046a:	74fb      	strb	r3, [r7, #19]

	if(id_status == HAL_OK)
 800046c:	7cfb      	ldrb	r3, [r7, #19]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d15c      	bne.n	800052c <init_rv_3028_c7+0xfa>
	{
		// Check id value TODO

		// Set timer to sleep
		// Note this starts here, not after we go into shutdown
		uint16_t time_to_sleep_sec = 15;
 8000472:	230f      	movs	r3, #15
 8000474:	823b      	strh	r3, [r7, #16]
		uint8_t timer_buff[2];
		timer_buff[0] = (time_to_sleep_sec & 0xFF);
 8000476:	8a3b      	ldrh	r3, [r7, #16]
 8000478:	b2db      	uxtb	r3, r3
 800047a:	723b      	strb	r3, [r7, #8]
		timer_buff[1] = ((time_to_sleep_sec >> 8) & 0x0F);
 800047c:	8a3b      	ldrh	r3, [r7, #16]
 800047e:	0a1b      	lsrs	r3, r3, #8
 8000480:	b29b      	uxth	r3, r3
 8000482:	b2db      	uxtb	r3, r3
 8000484:	f003 030f 	and.w	r3, r3, #15
 8000488:	b2db      	uxtb	r3, r3
 800048a:	727b      	strb	r3, [r7, #9]
		HAL_StatusTypeDef timer_set_success = HAL_I2C_Mem_Write(&i2c_handle, RV3028_ADDRESS, RV3028_TIMERVAL_0, I2C_MEMADD_SIZE_8BIT, timer_buff, 2, timeout);
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	9302      	str	r3, [sp, #8]
 8000490:	2302      	movs	r3, #2
 8000492:	9301      	str	r3, [sp, #4]
 8000494:	f107 0308 	add.w	r3, r7, #8
 8000498:	9300      	str	r3, [sp, #0]
 800049a:	2301      	movs	r3, #1
 800049c:	220a      	movs	r2, #10
 800049e:	21a4      	movs	r1, #164	; 0xa4
 80004a0:	f107 0020 	add.w	r0, r7, #32
 80004a4:	f000 fcd8 	bl	8000e58 <HAL_I2C_Mem_Write>
 80004a8:	4603      	mov	r3, r0
 80004aa:	73fb      	strb	r3, [r7, #15]

		// Set control
		uint8_t control_1_value = (0x02 << 0) | (0x01 << 2); // 1 Hz timer clock, enable periodic counter timer int, timer single mode
 80004ac:	2306      	movs	r3, #6
 80004ae:	71fb      	strb	r3, [r7, #7]
		HAL_StatusTypeDef ctrl_1_success = HAL_I2C_Mem_Write(&i2c_handle, RV3028_ADDRESS, RV3028_CTRL1, I2C_MEMADD_SIZE_8BIT, &control_1_value, 1, timeout);
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	9302      	str	r3, [sp, #8]
 80004b4:	2301      	movs	r3, #1
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	1dfb      	adds	r3, r7, #7
 80004ba:	9300      	str	r3, [sp, #0]
 80004bc:	2301      	movs	r3, #1
 80004be:	220f      	movs	r2, #15
 80004c0:	21a4      	movs	r1, #164	; 0xa4
 80004c2:	f107 0020 	add.w	r0, r7, #32
 80004c6:	f000 fcc7 	bl	8000e58 <HAL_I2C_Mem_Write>
 80004ca:	4603      	mov	r3, r0
 80004cc:	73bb      	strb	r3, [r7, #14]

		uint8_t control_2_value = (0x01 << 4); // Periodic countdown timer interrupt enable
 80004ce:	2310      	movs	r3, #16
 80004d0:	71bb      	strb	r3, [r7, #6]
		HAL_StatusTypeDef ctrl_2_success = HAL_I2C_Mem_Write(&i2c_handle, RV3028_ADDRESS, RV3028_CTRL2, I2C_MEMADD_SIZE_8BIT, &control_2_value, 1, timeout);
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	9302      	str	r3, [sp, #8]
 80004d6:	2301      	movs	r3, #1
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	1dbb      	adds	r3, r7, #6
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2301      	movs	r3, #1
 80004e0:	2210      	movs	r2, #16
 80004e2:	21a4      	movs	r1, #164	; 0xa4
 80004e4:	f107 0020 	add.w	r0, r7, #32
 80004e8:	f000 fcb6 	bl	8000e58 <HAL_I2C_Mem_Write>
 80004ec:	4603      	mov	r3, r0
 80004ee:	737b      	strb	r3, [r7, #13]

		// Set time
		uint8_t unix_reg[4];
		unix_reg[0] = current_time;
 80004f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	703b      	strb	r3, [r7, #0]
		unix_reg[1] = current_time >> 8;
 80004f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80004f8:	0a1b      	lsrs	r3, r3, #8
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	707b      	strb	r3, [r7, #1]
		unix_reg[2] = current_time >> 16;
 80004fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000500:	0c1b      	lsrs	r3, r3, #16
 8000502:	b2db      	uxtb	r3, r3
 8000504:	70bb      	strb	r3, [r7, #2]
		unix_reg[3] = current_time >> 24;
 8000506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000508:	0e1b      	lsrs	r3, r3, #24
 800050a:	b2db      	uxtb	r3, r3
 800050c:	70fb      	strb	r3, [r7, #3]
		HAL_StatusTypeDef time_setup = HAL_I2C_Mem_Write(&i2c_handle, RV3028_ADDRESS, RV3028_UNIX_TIME0, I2C_MEMADD_SIZE_8BIT, unix_reg, 4, timeout);
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	9302      	str	r3, [sp, #8]
 8000512:	2304      	movs	r3, #4
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	463b      	mov	r3, r7
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2301      	movs	r3, #1
 800051c:	221b      	movs	r2, #27
 800051e:	21a4      	movs	r1, #164	; 0xa4
 8000520:	f107 0020 	add.w	r0, r7, #32
 8000524:	f000 fc98 	bl	8000e58 <HAL_I2C_Mem_Write>
 8000528:	4603      	mov	r3, r0
 800052a:	733b      	strb	r3, [r7, #12]

	}

	return (id_status == HAL_OK);
 800052c:	7cfb      	ldrb	r3, [r7, #19]
 800052e:	2b00      	cmp	r3, #0
 8000530:	bf0c      	ite	eq
 8000532:	2301      	moveq	r3, #1
 8000534:	2300      	movne	r3, #0
 8000536:	b2db      	uxtb	r3, r3
}
 8000538:	4618      	mov	r0, r3
 800053a:	3718      	adds	r7, #24
 800053c:	46bd      	mov	sp, r7
 800053e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000542:	b004      	add	sp, #16
 8000544:	4770      	bx	lr
	...

08000548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800054e:	4b0f      	ldr	r3, [pc, #60]	; (800058c <HAL_MspInit+0x44>)
 8000550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000552:	4a0e      	ldr	r2, [pc, #56]	; (800058c <HAL_MspInit+0x44>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6613      	str	r3, [r2, #96]	; 0x60
 800055a:	4b0c      	ldr	r3, [pc, #48]	; (800058c <HAL_MspInit+0x44>)
 800055c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <HAL_MspInit+0x44>)
 8000568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056a:	4a08      	ldr	r2, [pc, #32]	; (800058c <HAL_MspInit+0x44>)
 800056c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000570:	6593      	str	r3, [r2, #88]	; 0x58
 8000572:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_MspInit+0x44>)
 8000574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	40021000 	.word	0x40021000

08000590 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	; 0x28
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a18      	ldr	r2, [pc, #96]	; (8000610 <HAL_I2C_MspInit+0x80>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d129      	bne.n	8000606 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	4b18      	ldr	r3, [pc, #96]	; (8000614 <HAL_I2C_MspInit+0x84>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	4a17      	ldr	r2, [pc, #92]	; (8000614 <HAL_I2C_MspInit+0x84>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005be:	4b15      	ldr	r3, [pc, #84]	; (8000614 <HAL_I2C_MspInit+0x84>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80005ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005d0:	2312      	movs	r3, #18
 80005d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005d4:	2301      	movs	r3, #1
 80005d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005d8:	2303      	movs	r3, #3
 80005da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005dc:	2304      	movs	r3, #4
 80005de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	4619      	mov	r1, r3
 80005e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ea:	f000 fa1b 	bl	8000a24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <HAL_I2C_MspInit+0x84>)
 80005f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005f2:	4a08      	ldr	r2, [pc, #32]	; (8000614 <HAL_I2C_MspInit+0x84>)
 80005f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005f8:	6593      	str	r3, [r2, #88]	; 0x58
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <HAL_I2C_MspInit+0x84>)
 80005fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000606:	bf00      	nop
 8000608:	3728      	adds	r7, #40	; 0x28
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40005400 	.word	0x40005400
 8000614:	40021000 	.word	0x40021000

08000618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800062a:	e7fe      	b.n	800062a <HardFault_Handler+0x4>

0800062c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000630:	e7fe      	b.n	8000630 <MemManage_Handler+0x4>

08000632 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000636:	e7fe      	b.n	8000636 <BusFault_Handler+0x4>

08000638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800063c:	e7fe      	b.n	800063c <UsageFault_Handler+0x4>

0800063e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800066c:	f000 f8b4 	bl	80007d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}

08000674 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000678:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x64>)
 800067a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800067e:	4a16      	ldr	r2, [pc, #88]	; (80006d8 <SystemInit+0x64>)
 8000680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000684:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x68>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x68>)
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x68>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <SystemInit+0x68>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a0f      	ldr	r2, [pc, #60]	; (80006dc <SystemInit+0x68>)
 80006a0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80006a4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80006a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <SystemInit+0x68>)
 80006ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006b0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <SystemInit+0x68>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a09      	ldr	r2, [pc, #36]	; (80006dc <SystemInit+0x68>)
 80006b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80006be:	4b07      	ldr	r3, [pc, #28]	; (80006dc <SystemInit+0x68>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <SystemInit+0x64>)
 80006c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006ca:	609a      	str	r2, [r3, #8]
#endif
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	40021000 	.word	0x40021000

080006e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000718 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80006e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80006e6:	e003      	b.n	80006f0 <LoopCopyDataInit>

080006e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80006ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80006ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80006ee:	3104      	adds	r1, #4

080006f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80006f0:	480b      	ldr	r0, [pc, #44]	; (8000720 <LoopForever+0xa>)
	ldr	r3, =_edata
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <LoopForever+0xe>)
	adds	r2, r0, r1
 80006f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80006f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80006f8:	d3f6      	bcc.n	80006e8 <CopyDataInit>
	ldr	r2, =_sbss
 80006fa:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <LoopForever+0x12>)
	b	LoopFillZerobss
 80006fc:	e002      	b.n	8000704 <LoopFillZerobss>

080006fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80006fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000700:	f842 3b04 	str.w	r3, [r2], #4

08000704 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <LoopForever+0x16>)
	cmp	r2, r3
 8000706:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000708:	d3f9      	bcc.n	80006fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800070a:	f7ff ffb3 	bl	8000674 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800070e:	f002 f97b 	bl	8002a08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000712:	f7ff fd5b 	bl	80001cc <main>

08000716 <LoopForever>:

LoopForever:
    b LoopForever
 8000716:	e7fe      	b.n	8000716 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000718:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 800071c:	08002ac0 	.word	0x08002ac0
	ldr	r0, =_sdata
 8000720:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000724:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000728:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800072c:	20000078 	.word	0x20000078

08000730 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000730:	e7fe      	b.n	8000730 <ADC1_2_IRQHandler>

08000732 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b082      	sub	sp, #8
 8000736:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000738:	2300      	movs	r3, #0
 800073a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800073c:	2003      	movs	r0, #3
 800073e:	f000 f93d 	bl	80009bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000742:	2000      	movs	r0, #0
 8000744:	f000 f80e 	bl	8000764 <HAL_InitTick>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d002      	beq.n	8000754 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800074e:	2301      	movs	r3, #1
 8000750:	71fb      	strb	r3, [r7, #7]
 8000752:	e001      	b.n	8000758 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000754:	f7ff fef8 	bl	8000548 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000758:	79fb      	ldrb	r3, [r7, #7]
}
 800075a:	4618      	mov	r0, r3
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800076c:	2300      	movs	r3, #0
 800076e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000770:	4b16      	ldr	r3, [pc, #88]	; (80007cc <HAL_InitTick+0x68>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d022      	beq.n	80007be <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <HAL_InitTick+0x6c>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b13      	ldr	r3, [pc, #76]	; (80007cc <HAL_InitTick+0x68>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000784:	fbb1 f3f3 	udiv	r3, r1, r3
 8000788:	fbb2 f3f3 	udiv	r3, r2, r3
 800078c:	4618      	mov	r0, r3
 800078e:	f000 f93c 	bl	8000a0a <HAL_SYSTICK_Config>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d10f      	bne.n	80007b8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b0f      	cmp	r3, #15
 800079c:	d809      	bhi.n	80007b2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800079e:	2200      	movs	r2, #0
 80007a0:	6879      	ldr	r1, [r7, #4]
 80007a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007a6:	f000 f914 	bl	80009d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <HAL_InitTick+0x70>)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	e007      	b.n	80007c2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
 80007b4:	73fb      	strb	r3, [r7, #15]
 80007b6:	e004      	b.n	80007c2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007b8:	2301      	movs	r3, #1
 80007ba:	73fb      	strb	r3, [r7, #15]
 80007bc:	e001      	b.n	80007c2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007be:	2301      	movs	r3, #1
 80007c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000008 	.word	0x20000008
 80007d0:	20000000 	.word	0x20000000
 80007d4:	20000004 	.word	0x20000004

080007d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <HAL_IncTick+0x1c>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <HAL_IncTick+0x20>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4413      	add	r3, r2
 80007e6:	4a03      	ldr	r2, [pc, #12]	; (80007f4 <HAL_IncTick+0x1c>)
 80007e8:	6013      	str	r3, [r2, #0]
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	20000074 	.word	0x20000074
 80007f8:	20000008 	.word	0x20000008

080007fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000800:	4b03      	ldr	r3, [pc, #12]	; (8000810 <HAL_GetTick+0x14>)
 8000802:	681b      	ldr	r3, [r3, #0]
}
 8000804:	4618      	mov	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	20000074 	.word	0x20000074

08000814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800081c:	f7ff ffee 	bl	80007fc <HAL_GetTick>
 8000820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800082c:	d004      	beq.n	8000838 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <HAL_Delay+0x40>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	68fa      	ldr	r2, [r7, #12]
 8000834:	4413      	add	r3, r2
 8000836:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000838:	bf00      	nop
 800083a:	f7ff ffdf 	bl	80007fc <HAL_GetTick>
 800083e:	4602      	mov	r2, r0
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	1ad3      	subs	r3, r2, r3
 8000844:	68fa      	ldr	r2, [r7, #12]
 8000846:	429a      	cmp	r2, r3
 8000848:	d8f7      	bhi.n	800083a <HAL_Delay+0x26>
  {
  }
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000008 	.word	0x20000008

08000858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <__NVIC_SetPriorityGrouping+0x44>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800086e:	68ba      	ldr	r2, [r7, #8]
 8000870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000874:	4013      	ands	r3, r2
 8000876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800088a:	4a04      	ldr	r2, [pc, #16]	; (800089c <__NVIC_SetPriorityGrouping+0x44>)
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	60d3      	str	r3, [r2, #12]
}
 8000890:	bf00      	nop
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a4:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <__NVIC_GetPriorityGrouping+0x18>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	0a1b      	lsrs	r3, r3, #8
 80008aa:	f003 0307 	and.w	r3, r3, #7
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	6039      	str	r1, [r7, #0]
 80008c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	db0a      	blt.n	80008e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	490c      	ldr	r1, [pc, #48]	; (8000908 <__NVIC_SetPriority+0x4c>)
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	0112      	lsls	r2, r2, #4
 80008dc:	b2d2      	uxtb	r2, r2
 80008de:	440b      	add	r3, r1
 80008e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e4:	e00a      	b.n	80008fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4908      	ldr	r1, [pc, #32]	; (800090c <__NVIC_SetPriority+0x50>)
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	f003 030f 	and.w	r3, r3, #15
 80008f2:	3b04      	subs	r3, #4
 80008f4:	0112      	lsls	r2, r2, #4
 80008f6:	b2d2      	uxtb	r2, r2
 80008f8:	440b      	add	r3, r1
 80008fa:	761a      	strb	r2, [r3, #24]
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	e000e100 	.word	0xe000e100
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000910:	b480      	push	{r7}
 8000912:	b089      	sub	sp, #36	; 0x24
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	f1c3 0307 	rsb	r3, r3, #7
 800092a:	2b04      	cmp	r3, #4
 800092c:	bf28      	it	cs
 800092e:	2304      	movcs	r3, #4
 8000930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	3304      	adds	r3, #4
 8000936:	2b06      	cmp	r3, #6
 8000938:	d902      	bls.n	8000940 <NVIC_EncodePriority+0x30>
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3b03      	subs	r3, #3
 800093e:	e000      	b.n	8000942 <NVIC_EncodePriority+0x32>
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000944:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	43da      	mvns	r2, r3
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	401a      	ands	r2, r3
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000958:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	fa01 f303 	lsl.w	r3, r1, r3
 8000962:	43d9      	mvns	r1, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000968:	4313      	orrs	r3, r2
         );
}
 800096a:	4618      	mov	r0, r3
 800096c:	3724      	adds	r7, #36	; 0x24
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
	...

08000978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3b01      	subs	r3, #1
 8000984:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000988:	d301      	bcc.n	800098e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800098a:	2301      	movs	r3, #1
 800098c:	e00f      	b.n	80009ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800098e:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <SysTick_Config+0x40>)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3b01      	subs	r3, #1
 8000994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000996:	210f      	movs	r1, #15
 8000998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800099c:	f7ff ff8e 	bl	80008bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <SysTick_Config+0x40>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009a6:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <SysTick_Config+0x40>)
 80009a8:	2207      	movs	r2, #7
 80009aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	e000e010 	.word	0xe000e010

080009bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f7ff ff47 	bl	8000858 <__NVIC_SetPriorityGrouping>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b086      	sub	sp, #24
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	4603      	mov	r3, r0
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]
 80009de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009e4:	f7ff ff5c 	bl	80008a0 <__NVIC_GetPriorityGrouping>
 80009e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	68b9      	ldr	r1, [r7, #8]
 80009ee:	6978      	ldr	r0, [r7, #20]
 80009f0:	f7ff ff8e 	bl	8000910 <NVIC_EncodePriority>
 80009f4:	4602      	mov	r2, r0
 80009f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009fa:	4611      	mov	r1, r2
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff5d 	bl	80008bc <__NVIC_SetPriority>
}
 8000a02:	bf00      	nop
 8000a04:	3718      	adds	r7, #24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff ffb0 	bl	8000978 <SysTick_Config>
 8000a18:	4603      	mov	r3, r0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b087      	sub	sp, #28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a32:	e14e      	b.n	8000cd2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	2101      	movs	r1, #1
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a40:	4013      	ands	r3, r2
 8000a42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	f000 8140 	beq.w	8000ccc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d00b      	beq.n	8000a6c <HAL_GPIO_Init+0x48>
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d007      	beq.n	8000a6c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a60:	2b11      	cmp	r3, #17
 8000a62:	d003      	beq.n	8000a6c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	2b12      	cmp	r3, #18
 8000a6a:	d130      	bne.n	8000ace <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	2203      	movs	r2, #3
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	68da      	ldr	r2, [r3, #12]
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	091b      	lsrs	r3, r3, #4
 8000ab8:	f003 0201 	and.w	r2, r3, #1
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	2203      	movs	r2, #3
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	689a      	ldr	r2, [r3, #8]
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	2b02      	cmp	r3, #2
 8000b04:	d003      	beq.n	8000b0e <HAL_GPIO_Init+0xea>
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	2b12      	cmp	r3, #18
 8000b0c:	d123      	bne.n	8000b56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	08da      	lsrs	r2, r3, #3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	3208      	adds	r2, #8
 8000b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	220f      	movs	r2, #15
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	691a      	ldr	r2, [r3, #16]
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	f003 0307 	and.w	r3, r3, #7
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	08da      	lsrs	r2, r3, #3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3208      	adds	r2, #8
 8000b50:	6939      	ldr	r1, [r7, #16]
 8000b52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	2203      	movs	r2, #3
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	43db      	mvns	r3, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f003 0203 	and.w	r2, r3, #3
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f000 809a 	beq.w	8000ccc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b98:	4b55      	ldr	r3, [pc, #340]	; (8000cf0 <HAL_GPIO_Init+0x2cc>)
 8000b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9c:	4a54      	ldr	r2, [pc, #336]	; (8000cf0 <HAL_GPIO_Init+0x2cc>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	6613      	str	r3, [r2, #96]	; 0x60
 8000ba4:	4b52      	ldr	r3, [pc, #328]	; (8000cf0 <HAL_GPIO_Init+0x2cc>)
 8000ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bb0:	4a50      	ldr	r2, [pc, #320]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	089b      	lsrs	r3, r3, #2
 8000bb6:	3302      	adds	r3, #2
 8000bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	f003 0303 	and.w	r3, r3, #3
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	220f      	movs	r2, #15
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bda:	d013      	beq.n	8000c04 <HAL_GPIO_Init+0x1e0>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a46      	ldr	r2, [pc, #280]	; (8000cf8 <HAL_GPIO_Init+0x2d4>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d00d      	beq.n	8000c00 <HAL_GPIO_Init+0x1dc>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a45      	ldr	r2, [pc, #276]	; (8000cfc <HAL_GPIO_Init+0x2d8>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d007      	beq.n	8000bfc <HAL_GPIO_Init+0x1d8>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a44      	ldr	r2, [pc, #272]	; (8000d00 <HAL_GPIO_Init+0x2dc>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d101      	bne.n	8000bf8 <HAL_GPIO_Init+0x1d4>
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	e006      	b.n	8000c06 <HAL_GPIO_Init+0x1e2>
 8000bf8:	2307      	movs	r3, #7
 8000bfa:	e004      	b.n	8000c06 <HAL_GPIO_Init+0x1e2>
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	e002      	b.n	8000c06 <HAL_GPIO_Init+0x1e2>
 8000c00:	2301      	movs	r3, #1
 8000c02:	e000      	b.n	8000c06 <HAL_GPIO_Init+0x1e2>
 8000c04:	2300      	movs	r3, #0
 8000c06:	697a      	ldr	r2, [r7, #20]
 8000c08:	f002 0203 	and.w	r2, r2, #3
 8000c0c:	0092      	lsls	r2, r2, #2
 8000c0e:	4093      	lsls	r3, r2
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c16:	4937      	ldr	r1, [pc, #220]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	089b      	lsrs	r3, r3, #2
 8000c1c:	3302      	adds	r3, #2
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000c24:	4b37      	ldr	r3, [pc, #220]	; (8000d04 <HAL_GPIO_Init+0x2e0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4013      	ands	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d003      	beq.n	8000c48 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c48:	4a2e      	ldr	r2, [pc, #184]	; (8000d04 <HAL_GPIO_Init+0x2e0>)
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000c4e:	4b2d      	ldr	r3, [pc, #180]	; (8000d04 <HAL_GPIO_Init+0x2e0>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	43db      	mvns	r3, r3
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d003      	beq.n	8000c72 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c72:	4a24      	ldr	r2, [pc, #144]	; (8000d04 <HAL_GPIO_Init+0x2e0>)
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c78:	4b22      	ldr	r3, [pc, #136]	; (8000d04 <HAL_GPIO_Init+0x2e0>)
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	43db      	mvns	r3, r3
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d003      	beq.n	8000c9c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c9c:	4a19      	ldr	r2, [pc, #100]	; (8000d04 <HAL_GPIO_Init+0x2e0>)
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <HAL_GPIO_Init+0x2e0>)
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	43db      	mvns	r3, r3
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d003      	beq.n	8000cc6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cc6:	4a0f      	ldr	r2, [pc, #60]	; (8000d04 <HAL_GPIO_Init+0x2e0>)
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	f47f aea9 	bne.w	8000a34 <HAL_GPIO_Init+0x10>
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	371c      	adds	r7, #28
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40010000 	.word	0x40010000
 8000cf8:	48000400 	.word	0x48000400
 8000cfc:	48000800 	.word	0x48000800
 8000d00:	48000c00 	.word	0x48000c00
 8000d04:	40010400 	.word	0x40010400

08000d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	807b      	strh	r3, [r7, #2]
 8000d14:	4613      	mov	r3, r2
 8000d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d18:	787b      	ldrb	r3, [r7, #1]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d003      	beq.n	8000d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d1e:	887a      	ldrh	r2, [r7, #2]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d24:	e002      	b.n	8000d2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d26:	887a      	ldrh	r2, [r7, #2]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d101      	bne.n	8000d4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e081      	b.n	8000e4e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d106      	bne.n	8000d64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff fc16 	bl	8000590 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2224      	movs	r2, #36	; 0x24
 8000d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 0201 	bic.w	r2, r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685a      	ldr	r2, [r3, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d107      	bne.n	8000db2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	689a      	ldr	r2, [r3, #8]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	e006      	b.n	8000dc0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689a      	ldr	r2, [r3, #8]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000dbe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d104      	bne.n	8000dd2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	6812      	ldr	r2, [r2, #0]
 8000ddc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000de0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000de4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68da      	ldr	r2, [r3, #12]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000df4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	691a      	ldr	r2, [r3, #16]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	ea42 0103 	orr.w	r1, r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	021a      	lsls	r2, r3, #8
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	69d9      	ldr	r1, [r3, #28]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a1a      	ldr	r2, [r3, #32]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f042 0201 	orr.w	r2, r2, #1
 8000e2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2220      	movs	r2, #32
 8000e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af02      	add	r7, sp, #8
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	4608      	mov	r0, r1
 8000e62:	4611      	mov	r1, r2
 8000e64:	461a      	mov	r2, r3
 8000e66:	4603      	mov	r3, r0
 8000e68:	817b      	strh	r3, [r7, #10]
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	813b      	strh	r3, [r7, #8]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b20      	cmp	r3, #32
 8000e7c:	f040 80f9 	bne.w	8001072 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000e80:	6a3b      	ldr	r3, [r7, #32]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d002      	beq.n	8000e8c <HAL_I2C_Mem_Write+0x34>
 8000e86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d105      	bne.n	8000e98 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e92:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e0ed      	b.n	8001074 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d101      	bne.n	8000ea6 <HAL_I2C_Mem_Write+0x4e>
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	e0e6      	b.n	8001074 <HAL_I2C_Mem_Write+0x21c>
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000eae:	f7ff fca5 	bl	80007fc <HAL_GetTick>
 8000eb2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	2319      	movs	r3, #25
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec0:	68f8      	ldr	r0, [r7, #12]
 8000ec2:	f000 fac3 	bl	800144c <I2C_WaitOnFlagUntilTimeout>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e0d1      	b.n	8001074 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2221      	movs	r2, #33	; 0x21
 8000ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2240      	movs	r2, #64	; 0x40
 8000edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6a3a      	ldr	r2, [r7, #32]
 8000eea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000ef0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000ef8:	88f8      	ldrh	r0, [r7, #6]
 8000efa:	893a      	ldrh	r2, [r7, #8]
 8000efc:	8979      	ldrh	r1, [r7, #10]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	4603      	mov	r3, r0
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	f000 f9d3 	bl	80012b4 <I2C_RequestMemoryWrite>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d005      	beq.n	8000f20 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2200      	movs	r2, #0
 8000f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e0a9      	b.n	8001074 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	2bff      	cmp	r3, #255	; 0xff
 8000f28:	d90e      	bls.n	8000f48 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	22ff      	movs	r2, #255	; 0xff
 8000f2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	8979      	ldrh	r1, [r7, #10]
 8000f38:	2300      	movs	r3, #0
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f000 fba5 	bl	8001690 <I2C_TransferConfig>
 8000f46:	e00f      	b.n	8000f68 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	8979      	ldrh	r1, [r7, #10]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f62:	68f8      	ldr	r0, [r7, #12]
 8000f64:	f000 fb94 	bl	8001690 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f6c:	68f8      	ldr	r0, [r7, #12]
 8000f6e:	f000 faad 	bl	80014cc <I2C_WaitOnTXISFlagUntilTimeout>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e07b      	b.n	8001074 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f80:	781a      	ldrb	r2, [r3, #0]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8c:	1c5a      	adds	r2, r3, #1
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d034      	beq.n	8001020 <HAL_I2C_Mem_Write+0x1c8>
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d130      	bne.n	8001020 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2180      	movs	r1, #128	; 0x80
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	f000 fa3f 	bl	800144c <I2C_WaitOnFlagUntilTimeout>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e04d      	b.n	8001074 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	2bff      	cmp	r3, #255	; 0xff
 8000fe0:	d90e      	bls.n	8001000 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	22ff      	movs	r2, #255	; 0xff
 8000fe6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	8979      	ldrh	r1, [r7, #10]
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ff8:	68f8      	ldr	r0, [r7, #12]
 8000ffa:	f000 fb49 	bl	8001690 <I2C_TransferConfig>
 8000ffe:	e00f      	b.n	8001020 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001004:	b29a      	uxth	r2, r3
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800100e:	b2da      	uxtb	r2, r3
 8001010:	8979      	ldrh	r1, [r7, #10]
 8001012:	2300      	movs	r3, #0
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800101a:	68f8      	ldr	r0, [r7, #12]
 800101c:	f000 fb38 	bl	8001690 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001024:	b29b      	uxth	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d19e      	bne.n	8000f68 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800102e:	68f8      	ldr	r0, [r7, #12]
 8001030:	f000 fa8c 	bl	800154c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e01a      	b.n	8001074 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2220      	movs	r2, #32
 8001044:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	6859      	ldr	r1, [r3, #4]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <HAL_I2C_Mem_Write+0x224>)
 8001052:	400b      	ands	r3, r1
 8001054:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2220      	movs	r2, #32
 800105a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	e000      	b.n	8001074 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001072:	2302      	movs	r3, #2
  }
}
 8001074:	4618      	mov	r0, r3
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	fe00e800 	.word	0xfe00e800

08001080 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af02      	add	r7, sp, #8
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	4608      	mov	r0, r1
 800108a:	4611      	mov	r1, r2
 800108c:	461a      	mov	r2, r3
 800108e:	4603      	mov	r3, r0
 8001090:	817b      	strh	r3, [r7, #10]
 8001092:	460b      	mov	r3, r1
 8001094:	813b      	strh	r3, [r7, #8]
 8001096:	4613      	mov	r3, r2
 8001098:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b20      	cmp	r3, #32
 80010a4:	f040 80fd 	bne.w	80012a2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80010a8:	6a3b      	ldr	r3, [r7, #32]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d002      	beq.n	80010b4 <HAL_I2C_Mem_Read+0x34>
 80010ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d105      	bne.n	80010c0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e0f1      	b.n	80012a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d101      	bne.n	80010ce <HAL_I2C_Mem_Read+0x4e>
 80010ca:	2302      	movs	r3, #2
 80010cc:	e0ea      	b.n	80012a4 <HAL_I2C_Mem_Read+0x224>
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2201      	movs	r2, #1
 80010d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80010d6:	f7ff fb91 	bl	80007fc <HAL_GetTick>
 80010da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2319      	movs	r3, #25
 80010e2:	2201      	movs	r2, #1
 80010e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f000 f9af 	bl	800144c <I2C_WaitOnFlagUntilTimeout>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e0d5      	b.n	80012a4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2222      	movs	r2, #34	; 0x22
 80010fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2240      	movs	r2, #64	; 0x40
 8001104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2200      	movs	r2, #0
 800110c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6a3a      	ldr	r2, [r7, #32]
 8001112:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001118:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2200      	movs	r2, #0
 800111e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001120:	88f8      	ldrh	r0, [r7, #6]
 8001122:	893a      	ldrh	r2, [r7, #8]
 8001124:	8979      	ldrh	r1, [r7, #10]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	4603      	mov	r3, r0
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	f000 f913 	bl	800135c <I2C_RequestMemoryRead>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d005      	beq.n	8001148 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e0ad      	b.n	80012a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800114c:	b29b      	uxth	r3, r3
 800114e:	2bff      	cmp	r3, #255	; 0xff
 8001150:	d90e      	bls.n	8001170 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	22ff      	movs	r2, #255	; 0xff
 8001156:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800115c:	b2da      	uxtb	r2, r3
 800115e:	8979      	ldrh	r1, [r7, #10]
 8001160:	4b52      	ldr	r3, [pc, #328]	; (80012ac <HAL_I2C_Mem_Read+0x22c>)
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001168:	68f8      	ldr	r0, [r7, #12]
 800116a:	f000 fa91 	bl	8001690 <I2C_TransferConfig>
 800116e:	e00f      	b.n	8001190 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001174:	b29a      	uxth	r2, r3
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800117e:	b2da      	uxtb	r2, r3
 8001180:	8979      	ldrh	r1, [r7, #10]
 8001182:	4b4a      	ldr	r3, [pc, #296]	; (80012ac <HAL_I2C_Mem_Read+0x22c>)
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	f000 fa80 	bl	8001690 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001196:	2200      	movs	r2, #0
 8001198:	2104      	movs	r1, #4
 800119a:	68f8      	ldr	r0, [r7, #12]
 800119c:	f000 f956 	bl	800144c <I2C_WaitOnFlagUntilTimeout>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e07c      	b.n	80012a4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011bc:	1c5a      	adds	r2, r3, #1
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011c6:	3b01      	subs	r3, #1
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	3b01      	subs	r3, #1
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d034      	beq.n	8001250 <HAL_I2C_Mem_Read+0x1d0>
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d130      	bne.n	8001250 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f4:	2200      	movs	r2, #0
 80011f6:	2180      	movs	r1, #128	; 0x80
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	f000 f927 	bl	800144c <I2C_WaitOnFlagUntilTimeout>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e04d      	b.n	80012a4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800120c:	b29b      	uxth	r3, r3
 800120e:	2bff      	cmp	r3, #255	; 0xff
 8001210:	d90e      	bls.n	8001230 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	22ff      	movs	r2, #255	; 0xff
 8001216:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800121c:	b2da      	uxtb	r2, r3
 800121e:	8979      	ldrh	r1, [r7, #10]
 8001220:	2300      	movs	r3, #0
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f000 fa31 	bl	8001690 <I2C_TransferConfig>
 800122e:	e00f      	b.n	8001250 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001234:	b29a      	uxth	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800123e:	b2da      	uxtb	r2, r3
 8001240:	8979      	ldrh	r1, [r7, #10]
 8001242:	2300      	movs	r3, #0
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	f000 fa20 	bl	8001690 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001254:	b29b      	uxth	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d19a      	bne.n	8001190 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800125e:	68f8      	ldr	r0, [r7, #12]
 8001260:	f000 f974 	bl	800154c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e01a      	b.n	80012a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2220      	movs	r2, #32
 8001274:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6859      	ldr	r1, [r3, #4]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_I2C_Mem_Read+0x230>)
 8001282:	400b      	ands	r3, r1
 8001284:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2220      	movs	r2, #32
 800128a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	e000      	b.n	80012a4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80012a2:	2302      	movs	r3, #2
  }
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	80002400 	.word	0x80002400
 80012b0:	fe00e800 	.word	0xfe00e800

080012b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af02      	add	r7, sp, #8
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	4608      	mov	r0, r1
 80012be:	4611      	mov	r1, r2
 80012c0:	461a      	mov	r2, r3
 80012c2:	4603      	mov	r3, r0
 80012c4:	817b      	strh	r3, [r7, #10]
 80012c6:	460b      	mov	r3, r1
 80012c8:	813b      	strh	r3, [r7, #8]
 80012ca:	4613      	mov	r3, r2
 80012cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	8979      	ldrh	r1, [r7, #10]
 80012d4:	4b20      	ldr	r3, [pc, #128]	; (8001358 <I2C_RequestMemoryWrite+0xa4>)
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f000 f9d7 	bl	8001690 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012e2:	69fa      	ldr	r2, [r7, #28]
 80012e4:	69b9      	ldr	r1, [r7, #24]
 80012e6:	68f8      	ldr	r0, [r7, #12]
 80012e8:	f000 f8f0 	bl	80014cc <I2C_WaitOnTXISFlagUntilTimeout>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e02c      	b.n	8001350 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d105      	bne.n	8001308 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80012fc:	893b      	ldrh	r3, [r7, #8]
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	629a      	str	r2, [r3, #40]	; 0x28
 8001306:	e015      	b.n	8001334 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001308:	893b      	ldrh	r3, [r7, #8]
 800130a:	0a1b      	lsrs	r3, r3, #8
 800130c:	b29b      	uxth	r3, r3
 800130e:	b2da      	uxtb	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001316:	69fa      	ldr	r2, [r7, #28]
 8001318:	69b9      	ldr	r1, [r7, #24]
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f000 f8d6 	bl	80014cc <I2C_WaitOnTXISFlagUntilTimeout>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e012      	b.n	8001350 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800132a:	893b      	ldrh	r3, [r7, #8]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	2200      	movs	r2, #0
 800133c:	2180      	movs	r1, #128	; 0x80
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f000 f884 	bl	800144c <I2C_WaitOnFlagUntilTimeout>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	80002000 	.word	0x80002000

0800135c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af02      	add	r7, sp, #8
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	4608      	mov	r0, r1
 8001366:	4611      	mov	r1, r2
 8001368:	461a      	mov	r2, r3
 800136a:	4603      	mov	r3, r0
 800136c:	817b      	strh	r3, [r7, #10]
 800136e:	460b      	mov	r3, r1
 8001370:	813b      	strh	r3, [r7, #8]
 8001372:	4613      	mov	r3, r2
 8001374:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	b2da      	uxtb	r2, r3
 800137a:	8979      	ldrh	r1, [r7, #10]
 800137c:	4b20      	ldr	r3, [pc, #128]	; (8001400 <I2C_RequestMemoryRead+0xa4>)
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	2300      	movs	r3, #0
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f000 f984 	bl	8001690 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001388:	69fa      	ldr	r2, [r7, #28]
 800138a:	69b9      	ldr	r1, [r7, #24]
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f000 f89d 	bl	80014cc <I2C_WaitOnTXISFlagUntilTimeout>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e02c      	b.n	80013f6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d105      	bne.n	80013ae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013a2:	893b      	ldrh	r3, [r7, #8]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	629a      	str	r2, [r3, #40]	; 0x28
 80013ac:	e015      	b.n	80013da <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80013ae:	893b      	ldrh	r3, [r7, #8]
 80013b0:	0a1b      	lsrs	r3, r3, #8
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013bc:	69fa      	ldr	r2, [r7, #28]
 80013be:	69b9      	ldr	r1, [r7, #24]
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f000 f883 	bl	80014cc <I2C_WaitOnTXISFlagUntilTimeout>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e012      	b.n	80013f6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013d0:	893b      	ldrh	r3, [r7, #8]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	2200      	movs	r2, #0
 80013e2:	2140      	movs	r1, #64	; 0x40
 80013e4:	68f8      	ldr	r0, [r7, #12]
 80013e6:	f000 f831 	bl	800144c <I2C_WaitOnFlagUntilTimeout>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e000      	b.n	80013f6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	80002000 	.word	0x80002000

08001404 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b02      	cmp	r3, #2
 8001418:	d103      	bne.n	8001422 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2200      	movs	r2, #0
 8001420:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	2b01      	cmp	r3, #1
 800142e:	d007      	beq.n	8001440 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	699a      	ldr	r2, [r3, #24]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f042 0201 	orr.w	r2, r2, #1
 800143e:	619a      	str	r2, [r3, #24]
  }
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	603b      	str	r3, [r7, #0]
 8001458:	4613      	mov	r3, r2
 800145a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800145c:	e022      	b.n	80014a4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001464:	d01e      	beq.n	80014a4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001466:	f7ff f9c9 	bl	80007fc <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	429a      	cmp	r2, r3
 8001474:	d302      	bcc.n	800147c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d113      	bne.n	80014a4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001480:	f043 0220 	orr.w	r2, r3, #32
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2220      	movs	r2, #32
 800148c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e00f      	b.n	80014c4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	699a      	ldr	r2, [r3, #24]
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	4013      	ands	r3, r2
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	bf0c      	ite	eq
 80014b4:	2301      	moveq	r3, #1
 80014b6:	2300      	movne	r3, #0
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	461a      	mov	r2, r3
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d0cd      	beq.n	800145e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80014d8:	e02c      	b.n	8001534 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f000 f870 	bl	80015c4 <I2C_IsAcknowledgeFailed>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e02a      	b.n	8001544 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014f4:	d01e      	beq.n	8001534 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014f6:	f7ff f981 	bl	80007fc <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	429a      	cmp	r2, r3
 8001504:	d302      	bcc.n	800150c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d113      	bne.n	8001534 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001510:	f043 0220 	orr.w	r2, r3, #32
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2220      	movs	r2, #32
 800151c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e007      	b.n	8001544 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b02      	cmp	r3, #2
 8001540:	d1cb      	bne.n	80014da <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001558:	e028      	b.n	80015ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f000 f830 	bl	80015c4 <I2C_IsAcknowledgeFailed>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e026      	b.n	80015bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800156e:	f7ff f945 	bl	80007fc <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	68ba      	ldr	r2, [r7, #8]
 800157a:	429a      	cmp	r2, r3
 800157c:	d302      	bcc.n	8001584 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d113      	bne.n	80015ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001588:	f043 0220 	orr.w	r2, r3, #32
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2220      	movs	r2, #32
 8001594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e007      	b.n	80015bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	f003 0320 	and.w	r3, r3, #32
 80015b6:	2b20      	cmp	r3, #32
 80015b8:	d1cf      	bne.n	800155a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	f003 0310 	and.w	r3, r3, #16
 80015da:	2b10      	cmp	r3, #16
 80015dc:	d151      	bne.n	8001682 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015de:	e022      	b.n	8001626 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015e6:	d01e      	beq.n	8001626 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015e8:	f7ff f908 	bl	80007fc <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d302      	bcc.n	80015fe <I2C_IsAcknowledgeFailed+0x3a>
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d113      	bne.n	8001626 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	f043 0220 	orr.w	r2, r3, #32
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2220      	movs	r2, #32
 800160e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e02e      	b.n	8001684 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	f003 0320 	and.w	r3, r3, #32
 8001630:	2b20      	cmp	r3, #32
 8001632:	d1d5      	bne.n	80015e0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2210      	movs	r2, #16
 800163a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2220      	movs	r2, #32
 8001642:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f7ff fedd 	bl	8001404 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6859      	ldr	r1, [r3, #4]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b0d      	ldr	r3, [pc, #52]	; (800168c <I2C_IsAcknowledgeFailed+0xc8>)
 8001656:	400b      	ands	r3, r1
 8001658:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	f043 0204 	orr.w	r2, r3, #4
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2220      	movs	r2, #32
 800166a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	fe00e800 	.word	0xfe00e800

08001690 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	460b      	mov	r3, r1
 800169c:	817b      	strh	r3, [r7, #10]
 800169e:	4613      	mov	r3, r2
 80016a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	0d5b      	lsrs	r3, r3, #21
 80016ac:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80016b0:	4b0d      	ldr	r3, [pc, #52]	; (80016e8 <I2C_TransferConfig+0x58>)
 80016b2:	430b      	orrs	r3, r1
 80016b4:	43db      	mvns	r3, r3
 80016b6:	ea02 0103 	and.w	r1, r2, r3
 80016ba:	897b      	ldrh	r3, [r7, #10]
 80016bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016c0:	7a7b      	ldrb	r3, [r7, #9]
 80016c2:	041b      	lsls	r3, r3, #16
 80016c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80016c8:	431a      	orrs	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	431a      	orrs	r2, r3
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	431a      	orrs	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80016da:	bf00      	nop
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	03ff63ff 	.word	0x03ff63ff

080016ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b20      	cmp	r3, #32
 8001700:	d138      	bne.n	8001774 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001708:	2b01      	cmp	r3, #1
 800170a:	d101      	bne.n	8001710 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800170c:	2302      	movs	r3, #2
 800170e:	e032      	b.n	8001776 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2224      	movs	r2, #36	; 0x24
 800171c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0201 	bic.w	r2, r2, #1
 800172e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800173e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6819      	ldr	r1, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 0201 	orr.w	r2, r2, #1
 800175e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2220      	movs	r2, #32
 8001764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	e000      	b.n	8001776 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001774:	2302      	movs	r3, #2
  }
}
 8001776:	4618      	mov	r0, r3
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001782:	b480      	push	{r7}
 8001784:	b085      	sub	sp, #20
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b20      	cmp	r3, #32
 8001796:	d139      	bne.n	800180c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d101      	bne.n	80017a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80017a2:	2302      	movs	r3, #2
 80017a4:	e033      	b.n	800180e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2224      	movs	r2, #36	; 0x24
 80017b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 0201 	bic.w	r2, r2, #1
 80017c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	4313      	orrs	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0201 	orr.w	r2, r2, #1
 80017f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2220      	movs	r2, #32
 80017fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001808:	2300      	movs	r3, #0
 800180a:	e000      	b.n	800180e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800180c:	2302      	movs	r3, #2
  }
}
 800180e:	4618      	mov	r0, r3
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f003 031f 	and.w	r3, r3, #31
 800182e:	43db      	mvns	r3, r3
 8001830:	401a      	ands	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	095b      	lsrs	r3, r3, #5
 8001836:	4908      	ldr	r1, [pc, #32]	; (8001858 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8001838:	4313      	orrs	r3, r2
 800183a:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_PWR_EnableWakeUpPin+0x3c>)
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f003 031f 	and.w	r3, r3, #31
 8001846:	4904      	ldr	r1, [pc, #16]	; (8001858 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8001848:	4313      	orrs	r3, r2
 800184a:	608b      	str	r3, [r1, #8]


}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	40007000 	.word	0x40007000

0800185c <HAL_PWR_DisableWakeUpPin>:
  *         This parameter can be one of the following values:
  *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 8001864:	4b07      	ldr	r3, [pc, #28]	; (8001884 <HAL_PWR_DisableWakeUpPin+0x28>)
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f003 031f 	and.w	r3, r3, #31
 800186e:	43db      	mvns	r3, r3
 8001870:	4904      	ldr	r1, [pc, #16]	; (8001884 <HAL_PWR_DisableWakeUpPin+0x28>)
 8001872:	4013      	ands	r3, r2
 8001874:	608b      	str	r3, [r1, #8]
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40007000 	.word	0x40007000

08001888 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001894:	4618      	mov	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40007000 	.word	0x40007000

080018a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018b2:	d130      	bne.n	8001916 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018b4:	4b23      	ldr	r3, [pc, #140]	; (8001944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018c0:	d038      	beq.n	8001934 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018c2:	4b20      	ldr	r3, [pc, #128]	; (8001944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018ca:	4a1e      	ldr	r2, [pc, #120]	; (8001944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018d2:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2232      	movs	r2, #50	; 0x32
 80018d8:	fb02 f303 	mul.w	r3, r2, r3
 80018dc:	4a1b      	ldr	r2, [pc, #108]	; (800194c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018de:	fba2 2303 	umull	r2, r3, r2, r3
 80018e2:	0c9b      	lsrs	r3, r3, #18
 80018e4:	3301      	adds	r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018e8:	e002      	b.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018f0:	4b14      	ldr	r3, [pc, #80]	; (8001944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018fc:	d102      	bne.n	8001904 <HAL_PWREx_ControlVoltageScaling+0x60>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1f2      	bne.n	80018ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001904:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001910:	d110      	bne.n	8001934 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e00f      	b.n	8001936 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001916:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800191e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001922:	d007      	beq.n	8001934 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800192c:	4a05      	ldr	r2, [pc, #20]	; (8001944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800192e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001932:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40007000 	.word	0x40007000
 8001948:	20000000 	.word	0x20000000
 800194c:	431bde83 	.word	0x431bde83

08001950 <HAL_PWREx_DisableInternalWakeUpLine>:
/**
  * @brief Disable Internal Wake-up Line.
  * @retval None
  */
void HAL_PWREx_DisableInternalWakeUpLine(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_EIWF);
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <HAL_PWREx_DisableInternalWakeUpLine+0x1c>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	4a04      	ldr	r2, [pc, #16]	; (800196c <HAL_PWREx_DisableInternalWakeUpLine+0x1c>)
 800195a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800195e:	6093      	str	r3, [r2, #8]
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40007000 	.word	0x40007000

08001970 <HAL_PWREx_EnableGPIOPullUp>:
  *         I/O pins are available) or the logical OR of several of them to set
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	73fb      	strb	r3, [r7, #15]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b07      	cmp	r3, #7
 8001982:	d863      	bhi.n	8001a4c <HAL_PWREx_EnableGPIOPullUp+0xdc>
 8001984:	a201      	add	r2, pc, #4	; (adr r2, 800198c <HAL_PWREx_EnableGPIOPullUp+0x1c>)
 8001986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198a:	bf00      	nop
 800198c:	080019ad 	.word	0x080019ad
 8001990:	080019d1 	.word	0x080019d1
 8001994:	080019f1 	.word	0x080019f1
 8001998:	08001a0d 	.word	0x08001a0d
 800199c:	08001a4d 	.word	0x08001a4d
 80019a0:	08001a4d 	.word	0x08001a4d
 80019a4:	08001a4d 	.word	0x08001a4d
 80019a8:	08001a29 	.word	0x08001a29
  {
    case PWR_GPIO_A:
       SET_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 80019ac:	4b2c      	ldr	r3, [pc, #176]	; (8001a60 <HAL_PWREx_EnableGPIOPullUp+0xf0>)
 80019ae:	6a1a      	ldr	r2, [r3, #32]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019b6:	492a      	ldr	r1, [pc, #168]	; (8001a60 <HAL_PWREx_EnableGPIOPullUp+0xf0>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	620b      	str	r3, [r1, #32]
       CLEAR_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 80019bc:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <HAL_PWREx_EnableGPIOPullUp+0xf0>)
 80019be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80019c6:	43db      	mvns	r3, r3
 80019c8:	4925      	ldr	r1, [pc, #148]	; (8001a60 <HAL_PWREx_EnableGPIOPullUp+0xf0>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	624b      	str	r3, [r1, #36]	; 0x24
       break;
 80019ce:	e040      	b.n	8001a52 <HAL_PWREx_EnableGPIOPullUp+0xe2>
    case PWR_GPIO_B:
       SET_BIT(PWR->PUCRB, GPIONumber);
 80019d0:	4b23      	ldr	r3, [pc, #140]	; (8001a60 <HAL_PWREx_EnableGPIOPullUp+0xf0>)
 80019d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019d4:	4922      	ldr	r1, [pc, #136]	; (8001a60 <HAL_PWREx_EnableGPIOPullUp+0xf0>)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	4313      	orrs	r3, r2
 80019da:	628b      	str	r3, [r1, #40]	; 0x28
       CLEAR_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 80019dc:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <HAL_PWREx_EnableGPIOPullUp+0xf0>)
 80019de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	f023 0310 	bic.w	r3, r3, #16
 80019e6:	43db      	mvns	r3, r3
 80019e8:	491d      	ldr	r1, [pc, #116]	; (8001a60 <HAL_PWREx_EnableGPIOPullUp+0xf0>)
 80019ea:	4013      	ands	r3, r2
 80019ec:	62cb      	str	r3, [r1, #44]	; 0x2c
       break;
 80019ee:	e030      	b.n	8001a52 <HAL_PWREx_EnableGPIOPullUp+0xe2>
    case PWR_GPIO_C:
       SET_BIT(PWR->PUCRC, GPIONumber);
 80019f0:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <HAL_PWREx_EnableGPIOPullUp+0xf0>)
 80019f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019f4:	491a      	ldr	r1, [pc, #104]	; (8001a60 <HAL_PWREx_EnableGPIOPullUp+0xf0>)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	630b      	str	r3, [r1, #48]	; 0x30
       CLEAR_BIT(PWR->PDCRC, GPIONumber);
 80019fc:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <HAL_PWREx_EnableGPIOPullUp+0xf0>)
 80019fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	4916      	ldr	r1, [pc, #88]	; (8001a60 <HAL_PWREx_EnableGPIOPullUp+0xf0>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	634b      	str	r3, [r1, #52]	; 0x34
       break;
 8001a0a:	e022      	b.n	8001a52 <HAL_PWREx_EnableGPIOPullUp+0xe2>
#if defined(GPIOD)
    case PWR_GPIO_D:
       SET_BIT(PWR->PUCRD, GPIONumber);
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <HAL_PWREx_EnableGPIOPullUp+0xf0>)
 8001a0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a10:	4913      	ldr	r1, [pc, #76]	; (8001a60 <HAL_PWREx_EnableGPIOPullUp+0xf0>)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	638b      	str	r3, [r1, #56]	; 0x38
       CLEAR_BIT(PWR->PDCRD, GPIONumber);
 8001a18:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <HAL_PWREx_EnableGPIOPullUp+0xf0>)
 8001a1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	490f      	ldr	r1, [pc, #60]	; (8001a60 <HAL_PWREx_EnableGPIOPullUp+0xf0>)
 8001a22:	4013      	ands	r3, r2
 8001a24:	63cb      	str	r3, [r1, #60]	; 0x3c
       break;
 8001a26:	e014      	b.n	8001a52 <HAL_PWREx_EnableGPIOPullUp+0xe2>
       SET_BIT(PWR->PUCRG, GPIONumber);
       CLEAR_BIT(PWR->PDCRG, GPIONumber);
       break;
#endif
    case PWR_GPIO_H:
       SET_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8001a28:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <HAL_PWREx_EnableGPIOPullUp+0xf0>)
 8001a2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	f003 030b 	and.w	r3, r3, #11
 8001a32:	490b      	ldr	r1, [pc, #44]	; (8001a60 <HAL_PWREx_EnableGPIOPullUp+0xf0>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	658b      	str	r3, [r1, #88]	; 0x58
#if defined (STM32L496xx) || defined (STM32L4A6xx)
       CLEAR_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
#else
       CLEAR_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8001a38:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_PWREx_EnableGPIOPullUp+0xf0>)
 8001a3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	f003 030b 	and.w	r3, r3, #11
 8001a42:	43db      	mvns	r3, r3
 8001a44:	4906      	ldr	r1, [pc, #24]	; (8001a60 <HAL_PWREx_EnableGPIOPullUp+0xf0>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	65cb      	str	r3, [r1, #92]	; 0x5c
#endif
       break;
 8001a4a:	e002      	b.n	8001a52 <HAL_PWREx_EnableGPIOPullUp+0xe2>
       SET_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       CLEAR_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       break;
#endif
    default:
      status = HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a50:	bf00      	nop
  }

  return status;
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	40007000 	.word	0x40007000

08001a64 <HAL_PWREx_EnterSHUTDOWNMode>:
  *        The BOR is not available.
  * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog state.
  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 8001a68:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f023 0307 	bic.w	r3, r3, #7
 8001a70:	4a07      	ldr	r2, [pc, #28]	; (8001a90 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8001a72:	f043 0304 	orr.w	r3, r3, #4
 8001a76:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8001a7e:	f043 0304 	orr.w	r3, r3, #4
 8001a82:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8001a84:	bf30      	wfi
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	40007000 	.word	0x40007000
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d102      	bne.n	8001aac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	f000 bc56 	b.w	8002358 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aac:	4ba1      	ldr	r3, [pc, #644]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 030c 	and.w	r3, r3, #12
 8001ab4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ab6:	4b9f      	ldr	r3, [pc, #636]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0310 	and.w	r3, r3, #16
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 80e6 	beq.w	8001c9a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d007      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x4c>
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	2b0c      	cmp	r3, #12
 8001ad8:	f040 808d 	bne.w	8001bf6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	f040 8089 	bne.w	8001bf6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ae4:	4b93      	ldr	r3, [pc, #588]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d006      	beq.n	8001afe <HAL_RCC_OscConfig+0x66>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d102      	bne.n	8001afe <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	f000 bc2d 	b.w	8002358 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b02:	4b8c      	ldr	r3, [pc, #560]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d004      	beq.n	8001b18 <HAL_RCC_OscConfig+0x80>
 8001b0e:	4b89      	ldr	r3, [pc, #548]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b16:	e005      	b.n	8001b24 <HAL_RCC_OscConfig+0x8c>
 8001b18:	4b86      	ldr	r3, [pc, #536]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b1e:	091b      	lsrs	r3, r3, #4
 8001b20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d224      	bcs.n	8001b72 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f000 fd85 	bl	800263c <RCC_SetFlashLatencyFromMSIRange>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	f000 bc0d 	b.w	8002358 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b3e:	4b7d      	ldr	r3, [pc, #500]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a7c      	ldr	r2, [pc, #496]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001b44:	f043 0308 	orr.w	r3, r3, #8
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	4b7a      	ldr	r3, [pc, #488]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b56:	4977      	ldr	r1, [pc, #476]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b5c:	4b75      	ldr	r3, [pc, #468]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	021b      	lsls	r3, r3, #8
 8001b6a:	4972      	ldr	r1, [pc, #456]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	604b      	str	r3, [r1, #4]
 8001b70:	e025      	b.n	8001bbe <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b72:	4b70      	ldr	r3, [pc, #448]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a6f      	ldr	r2, [pc, #444]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001b78:	f043 0308 	orr.w	r3, r3, #8
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	4b6d      	ldr	r3, [pc, #436]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	496a      	ldr	r1, [pc, #424]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b90:	4b68      	ldr	r3, [pc, #416]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	4965      	ldr	r1, [pc, #404]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d109      	bne.n	8001bbe <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f000 fd44 	bl	800263c <RCC_SetFlashLatencyFromMSIRange>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e3cc      	b.n	8002358 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bbe:	f000 fcb3 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 8001bc2:	4601      	mov	r1, r0
 8001bc4:	4b5b      	ldr	r3, [pc, #364]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	4a5a      	ldr	r2, [pc, #360]	; (8001d38 <HAL_RCC_OscConfig+0x2a0>)
 8001bd0:	5cd3      	ldrb	r3, [r2, r3]
 8001bd2:	f003 031f 	and.w	r3, r3, #31
 8001bd6:	fa21 f303 	lsr.w	r3, r1, r3
 8001bda:	4a58      	ldr	r2, [pc, #352]	; (8001d3c <HAL_RCC_OscConfig+0x2a4>)
 8001bdc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bde:	4b58      	ldr	r3, [pc, #352]	; (8001d40 <HAL_RCC_OscConfig+0x2a8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fdbe 	bl	8000764 <HAL_InitTick>
 8001be8:	4603      	mov	r3, r0
 8001bea:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001bec:	7dfb      	ldrb	r3, [r7, #23]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d052      	beq.n	8001c98 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001bf2:	7dfb      	ldrb	r3, [r7, #23]
 8001bf4:	e3b0      	b.n	8002358 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d032      	beq.n	8001c64 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bfe:	4b4d      	ldr	r3, [pc, #308]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a4c      	ldr	r2, [pc, #304]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c0a:	f7fe fdf7 	bl	80007fc <HAL_GetTick>
 8001c0e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c12:	f7fe fdf3 	bl	80007fc <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e399      	b.n	8002358 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c24:	4b43      	ldr	r3, [pc, #268]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c30:	4b40      	ldr	r3, [pc, #256]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a3f      	ldr	r2, [pc, #252]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001c36:	f043 0308 	orr.w	r3, r3, #8
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	4b3d      	ldr	r3, [pc, #244]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	493a      	ldr	r1, [pc, #232]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c4e:	4b39      	ldr	r3, [pc, #228]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	4935      	ldr	r1, [pc, #212]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	604b      	str	r3, [r1, #4]
 8001c62:	e01a      	b.n	8001c9a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c64:	4b33      	ldr	r3, [pc, #204]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a32      	ldr	r2, [pc, #200]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001c6a:	f023 0301 	bic.w	r3, r3, #1
 8001c6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c70:	f7fe fdc4 	bl	80007fc <HAL_GetTick>
 8001c74:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c78:	f7fe fdc0 	bl	80007fc <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e366      	b.n	8002358 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c8a:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x1e0>
 8001c96:	e000      	b.n	8001c9a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d073      	beq.n	8001d8e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d005      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x220>
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	2b0c      	cmp	r3, #12
 8001cb0:	d10e      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	2b03      	cmp	r3, #3
 8001cb6:	d10b      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb8:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d063      	beq.n	8001d8c <HAL_RCC_OscConfig+0x2f4>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d15f      	bne.n	8001d8c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e343      	b.n	8002358 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd8:	d106      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x250>
 8001cda:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a15      	ldr	r2, [pc, #84]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	e01d      	b.n	8001d24 <HAL_RCC_OscConfig+0x28c>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cf0:	d10c      	bne.n	8001d0c <HAL_RCC_OscConfig+0x274>
 8001cf2:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a0f      	ldr	r2, [pc, #60]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a0c      	ldr	r2, [pc, #48]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	e00b      	b.n	8001d24 <HAL_RCC_OscConfig+0x28c>
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a08      	ldr	r2, [pc, #32]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a05      	ldr	r2, [pc, #20]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d01b      	beq.n	8001d64 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2c:	f7fe fd66 	bl	80007fc <HAL_GetTick>
 8001d30:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d32:	e010      	b.n	8001d56 <HAL_RCC_OscConfig+0x2be>
 8001d34:	40021000 	.word	0x40021000
 8001d38:	08002a78 	.word	0x08002a78
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d44:	f7fe fd5a 	bl	80007fc <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b64      	cmp	r3, #100	; 0x64
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e300      	b.n	8002358 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d56:	4ba0      	ldr	r3, [pc, #640]	; (8001fd8 <HAL_RCC_OscConfig+0x540>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0x2ac>
 8001d62:	e014      	b.n	8001d8e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d64:	f7fe fd4a 	bl	80007fc <HAL_GetTick>
 8001d68:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d6c:	f7fe fd46 	bl	80007fc <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b64      	cmp	r3, #100	; 0x64
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e2ec      	b.n	8002358 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d7e:	4b96      	ldr	r3, [pc, #600]	; (8001fd8 <HAL_RCC_OscConfig+0x540>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0x2d4>
 8001d8a:	e000      	b.n	8001d8e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d060      	beq.n	8001e5c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d9a:	6a3b      	ldr	r3, [r7, #32]
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d005      	beq.n	8001dac <HAL_RCC_OscConfig+0x314>
 8001da0:	6a3b      	ldr	r3, [r7, #32]
 8001da2:	2b0c      	cmp	r3, #12
 8001da4:	d119      	bne.n	8001dda <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d116      	bne.n	8001dda <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dac:	4b8a      	ldr	r3, [pc, #552]	; (8001fd8 <HAL_RCC_OscConfig+0x540>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x32c>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e2c9      	b.n	8002358 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc4:	4b84      	ldr	r3, [pc, #528]	; (8001fd8 <HAL_RCC_OscConfig+0x540>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	061b      	lsls	r3, r3, #24
 8001dd2:	4981      	ldr	r1, [pc, #516]	; (8001fd8 <HAL_RCC_OscConfig+0x540>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dd8:	e040      	b.n	8001e5c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d023      	beq.n	8001e2a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de2:	4b7d      	ldr	r3, [pc, #500]	; (8001fd8 <HAL_RCC_OscConfig+0x540>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a7c      	ldr	r2, [pc, #496]	; (8001fd8 <HAL_RCC_OscConfig+0x540>)
 8001de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dee:	f7fe fd05 	bl	80007fc <HAL_GetTick>
 8001df2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df6:	f7fe fd01 	bl	80007fc <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e2a7      	b.n	8002358 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e08:	4b73      	ldr	r3, [pc, #460]	; (8001fd8 <HAL_RCC_OscConfig+0x540>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0f0      	beq.n	8001df6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e14:	4b70      	ldr	r3, [pc, #448]	; (8001fd8 <HAL_RCC_OscConfig+0x540>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	061b      	lsls	r3, r3, #24
 8001e22:	496d      	ldr	r1, [pc, #436]	; (8001fd8 <HAL_RCC_OscConfig+0x540>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	604b      	str	r3, [r1, #4]
 8001e28:	e018      	b.n	8001e5c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e2a:	4b6b      	ldr	r3, [pc, #428]	; (8001fd8 <HAL_RCC_OscConfig+0x540>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a6a      	ldr	r2, [pc, #424]	; (8001fd8 <HAL_RCC_OscConfig+0x540>)
 8001e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e36:	f7fe fce1 	bl	80007fc <HAL_GetTick>
 8001e3a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e3e:	f7fe fcdd 	bl	80007fc <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e283      	b.n	8002358 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e50:	4b61      	ldr	r3, [pc, #388]	; (8001fd8 <HAL_RCC_OscConfig+0x540>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1f0      	bne.n	8001e3e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0308 	and.w	r3, r3, #8
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d07f      	beq.n	8001f68 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d05f      	beq.n	8001f30 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001e70:	4b59      	ldr	r3, [pc, #356]	; (8001fd8 <HAL_RCC_OscConfig+0x540>)
 8001e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e76:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	699a      	ldr	r2, [r3, #24]
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d037      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d006      	beq.n	8001e9e <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e25c      	b.n	8002358 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d01b      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8001ea8:	4b4b      	ldr	r3, [pc, #300]	; (8001fd8 <HAL_RCC_OscConfig+0x540>)
 8001eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eae:	4a4a      	ldr	r2, [pc, #296]	; (8001fd8 <HAL_RCC_OscConfig+0x540>)
 8001eb0:	f023 0301 	bic.w	r3, r3, #1
 8001eb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001eb8:	f7fe fca0 	bl	80007fc <HAL_GetTick>
 8001ebc:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec0:	f7fe fc9c 	bl	80007fc <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b11      	cmp	r3, #17
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e242      	b.n	8002358 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ed2:	4b41      	ldr	r3, [pc, #260]	; (8001fd8 <HAL_RCC_OscConfig+0x540>)
 8001ed4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1ef      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001ee0:	4b3d      	ldr	r3, [pc, #244]	; (8001fd8 <HAL_RCC_OscConfig+0x540>)
 8001ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ee6:	f023 0210 	bic.w	r2, r3, #16
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	493a      	ldr	r1, [pc, #232]	; (8001fd8 <HAL_RCC_OscConfig+0x540>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ef6:	4b38      	ldr	r3, [pc, #224]	; (8001fd8 <HAL_RCC_OscConfig+0x540>)
 8001ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001efc:	4a36      	ldr	r2, [pc, #216]	; (8001fd8 <HAL_RCC_OscConfig+0x540>)
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f06:	f7fe fc79 	bl	80007fc <HAL_GetTick>
 8001f0a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f0e:	f7fe fc75 	bl	80007fc <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b11      	cmp	r3, #17
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e21b      	b.n	8002358 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f20:	4b2d      	ldr	r3, [pc, #180]	; (8001fd8 <HAL_RCC_OscConfig+0x540>)
 8001f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0ef      	beq.n	8001f0e <HAL_RCC_OscConfig+0x476>
 8001f2e:	e01b      	b.n	8001f68 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f30:	4b29      	ldr	r3, [pc, #164]	; (8001fd8 <HAL_RCC_OscConfig+0x540>)
 8001f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f36:	4a28      	ldr	r2, [pc, #160]	; (8001fd8 <HAL_RCC_OscConfig+0x540>)
 8001f38:	f023 0301 	bic.w	r3, r3, #1
 8001f3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f40:	f7fe fc5c 	bl	80007fc <HAL_GetTick>
 8001f44:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f48:	f7fe fc58 	bl	80007fc <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b11      	cmp	r3, #17
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e1fe      	b.n	8002358 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f5a:	4b1f      	ldr	r3, [pc, #124]	; (8001fd8 <HAL_RCC_OscConfig+0x540>)
 8001f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1ef      	bne.n	8001f48 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 80c1 	beq.w	80020f8 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f7c:	4b16      	ldr	r3, [pc, #88]	; (8001fd8 <HAL_RCC_OscConfig+0x540>)
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d10e      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f88:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <HAL_RCC_OscConfig+0x540>)
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8c:	4a12      	ldr	r2, [pc, #72]	; (8001fd8 <HAL_RCC_OscConfig+0x540>)
 8001f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f92:	6593      	str	r3, [r2, #88]	; 0x58
 8001f94:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <HAL_RCC_OscConfig+0x540>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <HAL_RCC_OscConfig+0x544>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d11c      	bne.n	8001fec <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <HAL_RCC_OscConfig+0x544>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a09      	ldr	r2, [pc, #36]	; (8001fdc <HAL_RCC_OscConfig+0x544>)
 8001fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fbe:	f7fe fc1d 	bl	80007fc <HAL_GetTick>
 8001fc2:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc4:	e00c      	b.n	8001fe0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc6:	f7fe fc19 	bl	80007fc <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d905      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e1bf      	b.n	8002358 <HAL_RCC_OscConfig+0x8c0>
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe0:	4bb1      	ldr	r3, [pc, #708]	; (80022a8 <HAL_RCC_OscConfig+0x810>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0ec      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d02c      	beq.n	8002052 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001ff8:	4bac      	ldr	r3, [pc, #688]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 8001ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200a:	49a8      	ldr	r1, [pc, #672]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 800200c:	4313      	orrs	r3, r2
 800200e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	2b00      	cmp	r3, #0
 800201c:	d010      	beq.n	8002040 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800201e:	4ba3      	ldr	r3, [pc, #652]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 8002020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002024:	4aa1      	ldr	r2, [pc, #644]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 8002026:	f043 0304 	orr.w	r3, r3, #4
 800202a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800202e:	4b9f      	ldr	r3, [pc, #636]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 8002030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002034:	4a9d      	ldr	r2, [pc, #628]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800203e:	e018      	b.n	8002072 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002040:	4b9a      	ldr	r3, [pc, #616]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002046:	4a99      	ldr	r2, [pc, #612]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002050:	e00f      	b.n	8002072 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002052:	4b96      	ldr	r3, [pc, #600]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 8002054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002058:	4a94      	ldr	r2, [pc, #592]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 800205a:	f023 0301 	bic.w	r3, r3, #1
 800205e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002062:	4b92      	ldr	r3, [pc, #584]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 8002064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002068:	4a90      	ldr	r2, [pc, #576]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 800206a:	f023 0304 	bic.w	r3, r3, #4
 800206e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d016      	beq.n	80020a8 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207a:	f7fe fbbf 	bl	80007fc <HAL_GetTick>
 800207e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002080:	e00a      	b.n	8002098 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002082:	f7fe fbbb 	bl	80007fc <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002090:	4293      	cmp	r3, r2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e15f      	b.n	8002358 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002098:	4b84      	ldr	r3, [pc, #528]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 800209a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0ed      	beq.n	8002082 <HAL_RCC_OscConfig+0x5ea>
 80020a6:	e01d      	b.n	80020e4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a8:	f7fe fba8 	bl	80007fc <HAL_GetTick>
 80020ac:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020ae:	e00a      	b.n	80020c6 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b0:	f7fe fba4 	bl	80007fc <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80020be:	4293      	cmp	r3, r2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e148      	b.n	8002358 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020c6:	4b79      	ldr	r3, [pc, #484]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 80020c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1ed      	bne.n	80020b0 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80020d4:	4b75      	ldr	r3, [pc, #468]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 80020d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020da:	4a74      	ldr	r2, [pc, #464]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 80020dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d105      	bne.n	80020f8 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ec:	4b6f      	ldr	r3, [pc, #444]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 80020ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f0:	4a6e      	ldr	r2, [pc, #440]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 80020f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0320 	and.w	r3, r3, #32
 8002100:	2b00      	cmp	r3, #0
 8002102:	d03c      	beq.n	800217e <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002108:	2b00      	cmp	r3, #0
 800210a:	d01c      	beq.n	8002146 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800210c:	4b67      	ldr	r3, [pc, #412]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 800210e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002112:	4a66      	ldr	r2, [pc, #408]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211c:	f7fe fb6e 	bl	80007fc <HAL_GetTick>
 8002120:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002124:	f7fe fb6a 	bl	80007fc <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e110      	b.n	8002358 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002136:	4b5d      	ldr	r3, [pc, #372]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 8002138:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0ef      	beq.n	8002124 <HAL_RCC_OscConfig+0x68c>
 8002144:	e01b      	b.n	800217e <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002146:	4b59      	ldr	r3, [pc, #356]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 8002148:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800214c:	4a57      	ldr	r2, [pc, #348]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 800214e:	f023 0301 	bic.w	r3, r3, #1
 8002152:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002156:	f7fe fb51 	bl	80007fc <HAL_GetTick>
 800215a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800215e:	f7fe fb4d 	bl	80007fc <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e0f3      	b.n	8002358 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002170:	4b4e      	ldr	r3, [pc, #312]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 8002172:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1ef      	bne.n	800215e <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 80e7 	beq.w	8002356 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218c:	2b02      	cmp	r3, #2
 800218e:	f040 80b7 	bne.w	8002300 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002192:	4b46      	ldr	r3, [pc, #280]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f003 0203 	and.w	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d124      	bne.n	80021f0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b0:	3b01      	subs	r3, #1
 80021b2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d11b      	bne.n	80021f0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d113      	bne.n	80021f0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d2:	085b      	lsrs	r3, r3, #1
 80021d4:	3b01      	subs	r3, #1
 80021d6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021d8:	429a      	cmp	r2, r3
 80021da:	d109      	bne.n	80021f0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	085b      	lsrs	r3, r3, #1
 80021e8:	3b01      	subs	r3, #1
 80021ea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d061      	beq.n	80022b4 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021f0:	6a3b      	ldr	r3, [r7, #32]
 80021f2:	2b0c      	cmp	r3, #12
 80021f4:	d056      	beq.n	80022a4 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021f6:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a2c      	ldr	r2, [pc, #176]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 80021fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002200:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002202:	f7fe fafb 	bl	80007fc <HAL_GetTick>
 8002206:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800220a:	f7fe faf7 	bl	80007fc <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e09d      	b.n	8002358 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800221c:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f0      	bne.n	800220a <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002228:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <HAL_RCC_OscConfig+0x818>)
 800222e:	4013      	ands	r3, r2
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002238:	3a01      	subs	r2, #1
 800223a:	0112      	lsls	r2, r2, #4
 800223c:	4311      	orrs	r1, r2
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002242:	0212      	lsls	r2, r2, #8
 8002244:	4311      	orrs	r1, r2
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800224a:	0852      	lsrs	r2, r2, #1
 800224c:	3a01      	subs	r2, #1
 800224e:	0552      	lsls	r2, r2, #21
 8002250:	4311      	orrs	r1, r2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002256:	0852      	lsrs	r2, r2, #1
 8002258:	3a01      	subs	r2, #1
 800225a:	0652      	lsls	r2, r2, #25
 800225c:	430a      	orrs	r2, r1
 800225e:	4913      	ldr	r1, [pc, #76]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 8002260:	4313      	orrs	r3, r2
 8002262:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002264:	4b11      	ldr	r3, [pc, #68]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 800226a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800226e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002270:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	4a0d      	ldr	r2, [pc, #52]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 8002276:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800227a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800227c:	f7fe fabe 	bl	80007fc <HAL_GetTick>
 8002280:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002284:	f7fe faba 	bl	80007fc <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e060      	b.n	8002358 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <HAL_RCC_OscConfig+0x814>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022a2:	e058      	b.n	8002356 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e057      	b.n	8002358 <HAL_RCC_OscConfig+0x8c0>
 80022a8:	40007000 	.word	0x40007000
 80022ac:	40021000 	.word	0x40021000
 80022b0:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b4:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <HAL_RCC_OscConfig+0x8c8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d14a      	bne.n	8002356 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022c0:	4b27      	ldr	r3, [pc, #156]	; (8002360 <HAL_RCC_OscConfig+0x8c8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a26      	ldr	r2, [pc, #152]	; (8002360 <HAL_RCC_OscConfig+0x8c8>)
 80022c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022cc:	4b24      	ldr	r3, [pc, #144]	; (8002360 <HAL_RCC_OscConfig+0x8c8>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	4a23      	ldr	r2, [pc, #140]	; (8002360 <HAL_RCC_OscConfig+0x8c8>)
 80022d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022d8:	f7fe fa90 	bl	80007fc <HAL_GetTick>
 80022dc:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e0:	f7fe fa8c 	bl	80007fc <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e032      	b.n	8002358 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f2:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HAL_RCC_OscConfig+0x8c8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0x848>
 80022fe:	e02a      	b.n	8002356 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	2b0c      	cmp	r3, #12
 8002304:	d025      	beq.n	8002352 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002306:	4b16      	ldr	r3, [pc, #88]	; (8002360 <HAL_RCC_OscConfig+0x8c8>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a15      	ldr	r2, [pc, #84]	; (8002360 <HAL_RCC_OscConfig+0x8c8>)
 800230c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002310:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002312:	4b13      	ldr	r3, [pc, #76]	; (8002360 <HAL_RCC_OscConfig+0x8c8>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	4a12      	ldr	r2, [pc, #72]	; (8002360 <HAL_RCC_OscConfig+0x8c8>)
 8002318:	f023 0303 	bic.w	r3, r3, #3
 800231c:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800231e:	4b10      	ldr	r3, [pc, #64]	; (8002360 <HAL_RCC_OscConfig+0x8c8>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	4a0f      	ldr	r2, [pc, #60]	; (8002360 <HAL_RCC_OscConfig+0x8c8>)
 8002324:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002328:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232a:	f7fe fa67 	bl	80007fc <HAL_GetTick>
 800232e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002332:	f7fe fa63 	bl	80007fc <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e009      	b.n	8002358 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_RCC_OscConfig+0x8c8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1f0      	bne.n	8002332 <HAL_RCC_OscConfig+0x89a>
 8002350:	e001      	b.n	8002356 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3728      	adds	r7, #40	; 0x28
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40021000 	.word	0x40021000

08002364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0c8      	b.n	800250a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002378:	4b66      	ldr	r3, [pc, #408]	; (8002514 <HAL_RCC_ClockConfig+0x1b0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d910      	bls.n	80023a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b63      	ldr	r3, [pc, #396]	; (8002514 <HAL_RCC_ClockConfig+0x1b0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 0207 	bic.w	r2, r3, #7
 800238e:	4961      	ldr	r1, [pc, #388]	; (8002514 <HAL_RCC_ClockConfig+0x1b0>)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002396:	4b5f      	ldr	r3, [pc, #380]	; (8002514 <HAL_RCC_ClockConfig+0x1b0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d001      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0b0      	b.n	800250a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d04c      	beq.n	800244e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d107      	bne.n	80023cc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023bc:	4b56      	ldr	r3, [pc, #344]	; (8002518 <HAL_RCC_ClockConfig+0x1b4>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d121      	bne.n	800240c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e09e      	b.n	800250a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d107      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023d4:	4b50      	ldr	r3, [pc, #320]	; (8002518 <HAL_RCC_ClockConfig+0x1b4>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d115      	bne.n	800240c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e092      	b.n	800250a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d107      	bne.n	80023fc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023ec:	4b4a      	ldr	r3, [pc, #296]	; (8002518 <HAL_RCC_ClockConfig+0x1b4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d109      	bne.n	800240c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e086      	b.n	800250a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023fc:	4b46      	ldr	r3, [pc, #280]	; (8002518 <HAL_RCC_ClockConfig+0x1b4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e07e      	b.n	800250a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800240c:	4b42      	ldr	r3, [pc, #264]	; (8002518 <HAL_RCC_ClockConfig+0x1b4>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f023 0203 	bic.w	r2, r3, #3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	493f      	ldr	r1, [pc, #252]	; (8002518 <HAL_RCC_ClockConfig+0x1b4>)
 800241a:	4313      	orrs	r3, r2
 800241c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800241e:	f7fe f9ed 	bl	80007fc <HAL_GetTick>
 8002422:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002424:	e00a      	b.n	800243c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002426:	f7fe f9e9 	bl	80007fc <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	f241 3288 	movw	r2, #5000	; 0x1388
 8002434:	4293      	cmp	r3, r2
 8002436:	d901      	bls.n	800243c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e066      	b.n	800250a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243c:	4b36      	ldr	r3, [pc, #216]	; (8002518 <HAL_RCC_ClockConfig+0x1b4>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 020c 	and.w	r2, r3, #12
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	429a      	cmp	r2, r3
 800244c:	d1eb      	bne.n	8002426 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d008      	beq.n	800246c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800245a:	4b2f      	ldr	r3, [pc, #188]	; (8002518 <HAL_RCC_ClockConfig+0x1b4>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	492c      	ldr	r1, [pc, #176]	; (8002518 <HAL_RCC_ClockConfig+0x1b4>)
 8002468:	4313      	orrs	r3, r2
 800246a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800246c:	4b29      	ldr	r3, [pc, #164]	; (8002514 <HAL_RCC_ClockConfig+0x1b0>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d210      	bcs.n	800249c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247a:	4b26      	ldr	r3, [pc, #152]	; (8002514 <HAL_RCC_ClockConfig+0x1b0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 0207 	bic.w	r2, r3, #7
 8002482:	4924      	ldr	r1, [pc, #144]	; (8002514 <HAL_RCC_ClockConfig+0x1b0>)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	4313      	orrs	r3, r2
 8002488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248a:	4b22      	ldr	r3, [pc, #136]	; (8002514 <HAL_RCC_ClockConfig+0x1b0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d001      	beq.n	800249c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e036      	b.n	800250a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a8:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <HAL_RCC_ClockConfig+0x1b4>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	4918      	ldr	r1, [pc, #96]	; (8002518 <HAL_RCC_ClockConfig+0x1b4>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d009      	beq.n	80024da <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024c6:	4b14      	ldr	r3, [pc, #80]	; (8002518 <HAL_RCC_ClockConfig+0x1b4>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4910      	ldr	r1, [pc, #64]	; (8002518 <HAL_RCC_ClockConfig+0x1b4>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024da:	f000 f825 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 80024de:	4601      	mov	r1, r0
 80024e0:	4b0d      	ldr	r3, [pc, #52]	; (8002518 <HAL_RCC_ClockConfig+0x1b4>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	091b      	lsrs	r3, r3, #4
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	4a0c      	ldr	r2, [pc, #48]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 80024ec:	5cd3      	ldrb	r3, [r2, r3]
 80024ee:	f003 031f 	and.w	r3, r3, #31
 80024f2:	fa21 f303 	lsr.w	r3, r1, r3
 80024f6:	4a0a      	ldr	r2, [pc, #40]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024fa:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe f930 	bl	8000764 <HAL_InitTick>
 8002504:	4603      	mov	r3, r0
 8002506:	72fb      	strb	r3, [r7, #11]

  return status;
 8002508:	7afb      	ldrb	r3, [r7, #11]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40022000 	.word	0x40022000
 8002518:	40021000 	.word	0x40021000
 800251c:	08002a78 	.word	0x08002a78
 8002520:	20000000 	.word	0x20000000
 8002524:	20000004 	.word	0x20000004

08002528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002528:	b480      	push	{r7}
 800252a:	b089      	sub	sp, #36	; 0x24
 800252c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
 8002532:	2300      	movs	r3, #0
 8002534:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002536:	4b3d      	ldr	r3, [pc, #244]	; (800262c <HAL_RCC_GetSysClockFreq+0x104>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002540:	4b3a      	ldr	r3, [pc, #232]	; (800262c <HAL_RCC_GetSysClockFreq+0x104>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0x34>
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	2b0c      	cmp	r3, #12
 8002554:	d121      	bne.n	800259a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d11e      	bne.n	800259a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800255c:	4b33      	ldr	r3, [pc, #204]	; (800262c <HAL_RCC_GetSysClockFreq+0x104>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	2b00      	cmp	r3, #0
 8002566:	d107      	bne.n	8002578 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002568:	4b30      	ldr	r3, [pc, #192]	; (800262c <HAL_RCC_GetSysClockFreq+0x104>)
 800256a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800256e:	0a1b      	lsrs	r3, r3, #8
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	61fb      	str	r3, [r7, #28]
 8002576:	e005      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002578:	4b2c      	ldr	r3, [pc, #176]	; (800262c <HAL_RCC_GetSysClockFreq+0x104>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	091b      	lsrs	r3, r3, #4
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002584:	4a2a      	ldr	r2, [pc, #168]	; (8002630 <HAL_RCC_GetSysClockFreq+0x108>)
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10d      	bne.n	80025b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002598:	e00a      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	2b04      	cmp	r3, #4
 800259e:	d102      	bne.n	80025a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025a0:	4b24      	ldr	r3, [pc, #144]	; (8002634 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025a2:	61bb      	str	r3, [r7, #24]
 80025a4:	e004      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d101      	bne.n	80025b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025ac:	4b22      	ldr	r3, [pc, #136]	; (8002638 <HAL_RCC_GetSysClockFreq+0x110>)
 80025ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	2b0c      	cmp	r3, #12
 80025b4:	d133      	bne.n	800261e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025b6:	4b1d      	ldr	r3, [pc, #116]	; (800262c <HAL_RCC_GetSysClockFreq+0x104>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d002      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0xa4>
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d003      	beq.n	80025d2 <HAL_RCC_GetSysClockFreq+0xaa>
 80025ca:	e005      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025cc:	4b19      	ldr	r3, [pc, #100]	; (8002634 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025ce:	617b      	str	r3, [r7, #20]
      break;
 80025d0:	e005      	b.n	80025de <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025d2:	4b19      	ldr	r3, [pc, #100]	; (8002638 <HAL_RCC_GetSysClockFreq+0x110>)
 80025d4:	617b      	str	r3, [r7, #20]
      break;
 80025d6:	e002      	b.n	80025de <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	617b      	str	r3, [r7, #20]
      break;
 80025dc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025de:	4b13      	ldr	r3, [pc, #76]	; (800262c <HAL_RCC_GetSysClockFreq+0x104>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	091b      	lsrs	r3, r3, #4
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	3301      	adds	r3, #1
 80025ea:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025ec:	4b0f      	ldr	r3, [pc, #60]	; (800262c <HAL_RCC_GetSysClockFreq+0x104>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	fb02 f203 	mul.w	r2, r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002602:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002604:	4b09      	ldr	r3, [pc, #36]	; (800262c <HAL_RCC_GetSysClockFreq+0x104>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	0e5b      	lsrs	r3, r3, #25
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	3301      	adds	r3, #1
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	fbb2 f3f3 	udiv	r3, r2, r3
 800261c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800261e:	69bb      	ldr	r3, [r7, #24]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3724      	adds	r7, #36	; 0x24
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	40021000 	.word	0x40021000
 8002630:	08002a88 	.word	0x08002a88
 8002634:	00f42400 	.word	0x00f42400
 8002638:	007a1200 	.word	0x007a1200

0800263c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002644:	2300      	movs	r3, #0
 8002646:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002648:	4b2a      	ldr	r3, [pc, #168]	; (80026f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800264a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002654:	f7ff f918 	bl	8001888 <HAL_PWREx_GetVoltageRange>
 8002658:	6178      	str	r0, [r7, #20]
 800265a:	e014      	b.n	8002686 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800265c:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800265e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002660:	4a24      	ldr	r2, [pc, #144]	; (80026f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002666:	6593      	str	r3, [r2, #88]	; 0x58
 8002668:	4b22      	ldr	r3, [pc, #136]	; (80026f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800266a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002674:	f7ff f908 	bl	8001888 <HAL_PWREx_GetVoltageRange>
 8002678:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800267a:	4b1e      	ldr	r3, [pc, #120]	; (80026f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800267c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267e:	4a1d      	ldr	r2, [pc, #116]	; (80026f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002684:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800268c:	d10b      	bne.n	80026a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b80      	cmp	r3, #128	; 0x80
 8002692:	d919      	bls.n	80026c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2ba0      	cmp	r3, #160	; 0xa0
 8002698:	d902      	bls.n	80026a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800269a:	2302      	movs	r3, #2
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	e013      	b.n	80026c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026a0:	2301      	movs	r3, #1
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	e010      	b.n	80026c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b80      	cmp	r3, #128	; 0x80
 80026aa:	d902      	bls.n	80026b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026ac:	2303      	movs	r3, #3
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	e00a      	b.n	80026c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b80      	cmp	r3, #128	; 0x80
 80026b6:	d102      	bne.n	80026be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026b8:	2302      	movs	r3, #2
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	e004      	b.n	80026c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b70      	cmp	r3, #112	; 0x70
 80026c2:	d101      	bne.n	80026c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026c4:	2301      	movs	r3, #1
 80026c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026c8:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f023 0207 	bic.w	r2, r3, #7
 80026d0:	4909      	ldr	r1, [pc, #36]	; (80026f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026d8:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d001      	beq.n	80026ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40021000 	.word	0x40021000
 80026f8:	40022000 	.word	0x40022000

080026fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002704:	2300      	movs	r3, #0
 8002706:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002708:	2300      	movs	r3, #0
 800270a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 809e 	beq.w	8002856 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800271a:	2300      	movs	r3, #0
 800271c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800271e:	4b46      	ldr	r3, [pc, #280]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800272e:	2300      	movs	r3, #0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00d      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002734:	4b40      	ldr	r3, [pc, #256]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002738:	4a3f      	ldr	r2, [pc, #252]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800273a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273e:	6593      	str	r3, [r2, #88]	; 0x58
 8002740:	4b3d      	ldr	r3, [pc, #244]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800274c:	2301      	movs	r3, #1
 800274e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002750:	4b3a      	ldr	r3, [pc, #232]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a39      	ldr	r2, [pc, #228]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800275c:	f7fe f84e 	bl	80007fc <HAL_GetTick>
 8002760:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002762:	e009      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002764:	f7fe f84a 	bl	80007fc <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d902      	bls.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	74fb      	strb	r3, [r7, #19]
        break;
 8002776:	e005      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002778:	4b30      	ldr	r3, [pc, #192]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0ef      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002784:	7cfb      	ldrb	r3, [r7, #19]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d15a      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800278a:	4b2b      	ldr	r3, [pc, #172]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800278c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002790:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002794:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d01e      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0xde>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d019      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027a6:	4b24      	ldr	r3, [pc, #144]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80027a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027b2:	4b21      	ldr	r3, [pc, #132]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80027b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b8:	4a1f      	ldr	r2, [pc, #124]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80027ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027c2:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80027c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c8:	4a1b      	ldr	r2, [pc, #108]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80027ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027d2:	4a19      	ldr	r2, [pc, #100]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d016      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e4:	f7fe f80a 	bl	80007fc <HAL_GetTick>
 80027e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ea:	e00b      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ec:	f7fe f806 	bl	80007fc <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d902      	bls.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	74fb      	strb	r3, [r7, #19]
            break;
 8002802:	e006      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002804:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0ec      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002812:	7cfb      	ldrb	r3, [r7, #19]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10b      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002818:	4b07      	ldr	r3, [pc, #28]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800281a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4904      	ldr	r1, [pc, #16]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800282e:	e009      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002830:	7cfb      	ldrb	r3, [r7, #19]
 8002832:	74bb      	strb	r3, [r7, #18]
 8002834:	e006      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000
 800283c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002840:	7cfb      	ldrb	r3, [r7, #19]
 8002842:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002844:	7c7b      	ldrb	r3, [r7, #17]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d105      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800284a:	4b6e      	ldr	r3, [pc, #440]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800284c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284e:	4a6d      	ldr	r2, [pc, #436]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002854:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00a      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002862:	4b68      	ldr	r3, [pc, #416]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002868:	f023 0203 	bic.w	r2, r3, #3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4964      	ldr	r1, [pc, #400]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002872:	4313      	orrs	r3, r2
 8002874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00a      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002884:	4b5f      	ldr	r3, [pc, #380]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288a:	f023 020c 	bic.w	r2, r3, #12
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	495c      	ldr	r1, [pc, #368]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00a      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028a6:	4b57      	ldr	r3, [pc, #348]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4953      	ldr	r1, [pc, #332]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0320 	and.w	r3, r3, #32
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00a      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028c8:	4b4e      	ldr	r3, [pc, #312]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	494b      	ldr	r1, [pc, #300]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00a      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028ea:	4b46      	ldr	r3, [pc, #280]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	4942      	ldr	r1, [pc, #264]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00a      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800290c:	4b3d      	ldr	r3, [pc, #244]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	493a      	ldr	r1, [pc, #232]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800292e:	4b35      	ldr	r3, [pc, #212]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002934:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	4931      	ldr	r1, [pc, #196]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00a      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002950:	4b2c      	ldr	r3, [pc, #176]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002956:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	4929      	ldr	r1, [pc, #164]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002972:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002978:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	4920      	ldr	r1, [pc, #128]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002982:	4313      	orrs	r3, r2
 8002984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d015      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002994:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a2:	4918      	ldr	r1, [pc, #96]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029b2:	d105      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029b4:	4b13      	ldr	r3, [pc, #76]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4a12      	ldr	r2, [pc, #72]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029be:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d015      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029cc:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029da:	490a      	ldr	r1, [pc, #40]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029ea:	d105      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	4a04      	ldr	r2, [pc, #16]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000

08002a08 <__libc_init_array>:
 8002a08:	b570      	push	{r4, r5, r6, lr}
 8002a0a:	4e0d      	ldr	r6, [pc, #52]	; (8002a40 <__libc_init_array+0x38>)
 8002a0c:	4c0d      	ldr	r4, [pc, #52]	; (8002a44 <__libc_init_array+0x3c>)
 8002a0e:	1ba4      	subs	r4, r4, r6
 8002a10:	10a4      	asrs	r4, r4, #2
 8002a12:	2500      	movs	r5, #0
 8002a14:	42a5      	cmp	r5, r4
 8002a16:	d109      	bne.n	8002a2c <__libc_init_array+0x24>
 8002a18:	4e0b      	ldr	r6, [pc, #44]	; (8002a48 <__libc_init_array+0x40>)
 8002a1a:	4c0c      	ldr	r4, [pc, #48]	; (8002a4c <__libc_init_array+0x44>)
 8002a1c:	f000 f820 	bl	8002a60 <_init>
 8002a20:	1ba4      	subs	r4, r4, r6
 8002a22:	10a4      	asrs	r4, r4, #2
 8002a24:	2500      	movs	r5, #0
 8002a26:	42a5      	cmp	r5, r4
 8002a28:	d105      	bne.n	8002a36 <__libc_init_array+0x2e>
 8002a2a:	bd70      	pop	{r4, r5, r6, pc}
 8002a2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a30:	4798      	blx	r3
 8002a32:	3501      	adds	r5, #1
 8002a34:	e7ee      	b.n	8002a14 <__libc_init_array+0xc>
 8002a36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a3a:	4798      	blx	r3
 8002a3c:	3501      	adds	r5, #1
 8002a3e:	e7f2      	b.n	8002a26 <__libc_init_array+0x1e>
 8002a40:	08002ab8 	.word	0x08002ab8
 8002a44:	08002ab8 	.word	0x08002ab8
 8002a48:	08002ab8 	.word	0x08002ab8
 8002a4c:	08002abc 	.word	0x08002abc

08002a50 <memset>:
 8002a50:	4402      	add	r2, r0
 8002a52:	4603      	mov	r3, r0
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d100      	bne.n	8002a5a <memset+0xa>
 8002a58:	4770      	bx	lr
 8002a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a5e:	e7f9      	b.n	8002a54 <memset+0x4>

08002a60 <_init>:
 8002a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a62:	bf00      	nop
 8002a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a66:	bc08      	pop	{r3}
 8002a68:	469e      	mov	lr, r3
 8002a6a:	4770      	bx	lr

08002a6c <_fini>:
 8002a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a6e:	bf00      	nop
 8002a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a72:	bc08      	pop	{r3}
 8002a74:	469e      	mov	lr, r3
 8002a76:	4770      	bx	lr
